<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[🔥 Info It 2.0：查询电影/图书的超快工具]]></title>
    <url>%2F2018%2F03%2F10%2Finfoit2%2F</url>
    <content type="text"><![CDATA[前言自 Info It 第一次 TestFlight 以来已经差不多 1 年 3 个月了，本想着在上架一周年的时候更新 2.0 的，奈何 17 年下半年实在太忙，准确的说，现在也忙的不行，但是因为已经一年了，所以强行熬了好多个通宵来更新。（Info It 1.0 的文章） Info It 是我写的第一款上架 App Store 的软件（Liquor It 暂不算），由于我的天真和新手，底层其实有很多的问题，还好一开始的版本功能没有很复杂，这也是我熬了快一个月才能把很多错误修正。 因为是利用业余时间，除了繁重的课业和项目外，我只能尽量利用本来看电影、休闲、玩乐的时间去开发，感谢大家的体谅！也真正的是因为我热爱在 iOS 上开发，我才能坚持下来。 点击下载：Info It - 通过分享快速搜索电影，书籍信息 Info It 2.0 之前总共上了 10 个 App Store 版本，总共有 22 个上传的版本，而更小的 build 数量，就不计算了~ 总共有 26 个 5 星评价，谢谢大家！ 总共收入约等于 0，同样谢谢大家！ Info It 的代码在 美国，中国，飞机上，咖啡厅，饭店，机场 都写过~ 开发者：开发这个世界. Info It 的缘由Info It 在改变，就像人一样，这是我在 1.0 的文章中写的： 从用豆瓣记录电影开始，每一次不论在微信中还是网页中微博中文章内有任何电影，都得一次次跳转到豆瓣软件去搜索（豆瓣启动3秒在加上至少2秒欢迎页面），又或者打开一个新的网页搜索，iOS 10 中多出了 Look Up 功能，可以直接使用网页搜索，但是依旧不快并且对于长期使用豆瓣等的人来说，不论是评分，评分人数，短评，长篇评论都是很需要查询的到的，因此就有个这个软件的诞生。1.0：Info It 是一款通过选中文字，运用 iOS 的 Action Extension 实现快速搜索电影，图书等的软件。 现在，我的缘由没有改变，但是 Info It 变得更强大了： 现在，Info It 使用了设计过的界面来承载信息流和搜索结果，在这之中，API 频繁使用，API 所做不到的地方都是通过爬去网页然后分析得来的。我在「特色功能」中详细介绍，简单的一句话来概括： 2.0：Info It 是一款致力于将搜索电影/图书等信息变得轻便、简单、快速的工具软件。 如果你是第一次使用 Info It，可以前往 1.0 文章视频例子 查看视频，如果你已经看过了，直接看下去吧~ Info It 简介Info It 通过运用 iOS 的 Action Extension，在任何可以选择文字的地方，选择分享按钮，实现快速在搜索电影/图书的相关信息。 软件内和共享插件有着基本相同的使用体验，让你不仅可以任何地方搜索，同时可以代替豆瓣自带的软件。 不需要跳转其他任何地方，保持在原有的页面上 详细的单个条目信息 列表模式查看搜索结果、对比评分 任何地方选中文字，分享，即刻查询 内置 Safari 浏览，达到豆瓣登录状态的存储（直接标记已看未看等） 可以配合多个场景达到效率化的使用，具体看后面的「使用场景」 Info It： 并不是豆瓣开发的 是因为个人需求开发 因为个人对于电影和读书搜索经常使用才开发的 问答欢迎像我提问，你也可以去往 1.0 问答 查看之前的提问！ 特色功能iPad 分屏 许多地方没有选择的余地，只能自己搜索，如果你是在 iPad 上，分屏欢迎你嘿！ 任意地方在任何能够选择文字的地方，都只需要两步就可以搜索： 选中文字 选择分享（Share），如果没有请先选择更多来加入 ps. 部分软件不给你选择文字，或者取消了苹果的选中文字弹出框，自己开发了一个新的，这种情况下，爱莫能助啊！ 无缝融合在尝试获取豆瓣的 API key 失败后，这个功能依旧只能点开网页来实现 标记电影，标记图书，查看标记状态 查看评论，查看影人资讯，查看打分，查看图片 所有在豆瓣、IMDb、烂番茄可以做到的，如今指尖可达，无需离开页面，触手可及！ 中英文无缝查询文章中的文字是「降临」？需要查询豆瓣记住英文名称在去 IMDb 查询？ Info It 直接帮你转换，获取相关信息，并且读取对应平台，从此你无需担心 多平台信息避免繁琐的跳转和复制查询： 目前 Info It 可以同时显示豆瓣电影和 IMDb 的评分（烂番茄的文档正在研究中~）目前图书方面只有 豆瓣读书 的评分（不知道你们还想看哪家的呢？可以告诉我我试试！） ** 目前仅 APP 内可以切换 电影/图书查询，下一步将会应用到 共享插件中~ 丰富的详情在搜索的结果页面，我放入了 相关的导演/作者，获取图片，年份，以及评分，给你更直观的查看需求，如果你仅仅需要查看一下评分等基础信息，无需任何多余的步骤和点击~ 点击单个电影详情页面后，你可以看到更加丰富的信息： 对于电影：影片介绍、以及对应可以观看的平台 对于图书：图书介绍、作者介绍 ps. 对于图书的购买信息还在斟酌要不要放进去~pps. 未来会加入更多，已经在研究中了~ 超快 打开 APP，输入，确认 一秒打开，一秒搜索 哪怕你放到文件夹中，根据我的方法，依然可以十分快速的打开：使用 3D Touch 放在文件夹中拥有同样的打开速度 打开网页速度看你网络决定，中国豆瓣很快，美国略慢 丰富的自定义 不论多小众的需求，如果在力所能及的范围，我一定去实现 打开角标显示数字1，将会永久显示角标 “1”，将 Info It 放入文件夹后，通过 3D Touch 则可以快速按压文件夹打开带有角标的 APP，专为希望将 Info It 放如文件夹的 iPhone 6s+ 设备用户定制（随时可以关闭角标显示） 可以真正达到一秒打开，没有间隔 具体可以看 #使用场景-使用 3D Touch 放在文件夹中拥有同样的打开速度 自动识别剪贴板，并且复制到输入框中 自动弹出键盘 URL scheme，直接使用可以方便的打开！ 以下功能是 Pro 的附加功能： 搜索历史数量显示，默认 3 个，内购后无限多 改变图标，目前有四个图标~ 历史记录点击加载缓存的数目，默认 3 个，自定义 加载缓存的速度将会非常快，如果不是很老的信息完全不用重新搜索 （正在考虑加入一个重新刷新的按钮，更方便 Pro 用户设定加载缓存多一点） 搜索结果加载数目，默认 9 个，自定义 Pro 用来提供我支付给苹果的开发者费用，一年 99 美金，所以我没有将 Pro 设定的非买不可，而是更加自定义化，如果你钱包有限，依旧可以完美的使用 Info It，然而如果你可以支持 ￥6，我将会很感谢你给予的支持并加油维护！ 使用场景使用 3D Touch 放在文件夹中拥有同样的打开速度 这是 Info It 的第一个为少数人做的功能（我自己），并不知道有没有人在意，但觉得小小的好功能还是很增加幸福感的！（简称小确幸哈哈） 在 Info It 的 设置-高级设置 中打开「开启数字角标」 提示获取通知，选择允许（不会发任何东西，只需要角标而已） 关闭 Info It，可以看到角标显示 1 放如文件夹中并关闭文件夹 3D Touch 按压对应文件夹，可以看到 Info It，点击便可以打开 你可以随时在 设置-高级设置 中关闭显示，角标就不会存在了 代替 豆瓣官方 APP首先需要打开上面的 使用 3D Touch 放在文件夹中拥有同样的打开速度 功能，可以最大化的代替放在文件夹中的的豆瓣，如果你想将 Info It 放到外面，那当然可以直接替代啦~ 这个功能可以代替豆瓣软件的原因有三：（以我个人例子，每个人使用情况不同~） 我将豆瓣也放在文件夹中，因此他们的层级一样 同样在文件夹中，Info It 开启这个功能后比豆瓣打开少一步（一个字：快） 相比于豆瓣的打开三秒等待，Info It 打开软件没有启动界面，没有广告，小巧，一秒（豆瓣？？你跟我讲豆瓣打开快我就真没话说了0 0） 同样的功能，豆瓣可以的 Info It 都可以做到（网页版豆瓣像查影人似乎不可以） 功能之外，你还可以参考 IMDb，烂番茄这两个国外著名影评网站 如果你使用豆瓣，复制中文名在到 IMDb 查询完全无效 你需要找到英文名，记住或者复制再查找 Info It 内置中英文名称自动转换（读取豆瓣数据），只要是国外影片都可以转换 功能之内，豆瓣读书和豆瓣电影可以同时查看，一键切换 豆瓣里面，你需要返回才能再查书 目前不及豆瓣的功能： 没有已看，想看等列表 我一直在找一个比较恰当和好的方式来管理这些（拭目以待把！） 没有豆瓣的文章等 没有办法随时看自己的个人主页和广播 如果以上功能对你来讲没啥用，那你妥妥的可以切换啦！ 在豆瓣官方 APP 中使用！2.0 版本在替代豆瓣上越来越完美！视频中使用的是 1.0，请见谅没有那么多的时间~ 好奇不？为什么要在豆瓣软件中使用豆瓣呢。。。我录了一个视频让你直观的感受一下。 不得不说作为一个豆瓣记录的人，发现豆瓣对于自己软件内的文章提到的电影没有任何办法快速查询在豆瓣的状态我也是没办法。。。就比如你在看豆瓣里的一篇文章（我现在很多时候都会看一遍首页那些推荐），文章里提到了什么电影，你想知道这部电影怎么办如果好标记一下想看，该怎么办呢？ 返回豆瓣（关闭了文章） 搜索这部电影，并且标记 那之前的文章怎么办。。。？回去重新找0 0？ 或者记下来（复制下来），看完后在退出文章搜索（万一很多个电影、明星咋办） 这个流程挺醉的，如果你没有需求你不会有感觉，但你如果尝试过一两次你一定会有一句 MMP 要讲。 Info It 可以完美的解决在豆瓣内部看文章，长评论里面出现电影图书查询的所有问题！ yi，文章出现了电影名字！ 选择它，选择共享，选择 Info It，标记，查看，搞定！ ps. 视频中豆瓣打开过慢纯粹因为我在美国。。中国开的很快0 0 在微信、微博、Twitter 等使用 阅读微信文章时直接选取文字，点击分享 查看微博时直接选取文字分享搜索（官方不可以在一条微博内选取，请使用第三方客户端） 查看微博头条文章、Twitter 内的文章时，选取文字分享 Telegram 等任何软件中只要可以选取文字便可以分享 进一步的分享Todoist 待办事项等使用于使用 todo 软件，收集软件等进行整理归档的朋友 结合其他软件自带的分享功能，在打开的 Info It 页面上，直接选择分享按钮，便可以分享到任何在 Safari 中支持分享的软件。例如： 选择分享到 Todoist，可以快速将想看的电影，想买的书，想看的书加入到对应的列表中： 分享的内容为 markdown 格式，可以直接点击进入对应链接 直接添加优先级，评论，分配给 xxx 等 在日渐活跃的软件社区，支持分享的软件越来越多，机会也就越来越大。 二次社交分享分享到微博、微信、短信、Moke、Twitter、Telegram、Whatsapp 等等等 Safari 的分享支持有多少，世界就有多大！ Linnk 等聚集软件直接选择分享到 Linnk、Raindrop、收趣等聚集软件 将有兴趣的电影、图书随时随地存储！ 听播客时使用本人也是一个播客爱好者，目前使用的 Pocket Casts，但不论你使用什么客户端都一定会有 shownotes，绝大多数的播客都是内嵌地址或者附上地址，但也不排除会有少数并没有。 软件版本更新时间线Info It 2.0！2018年3月??日Info It 2.0 版本正式更新！ 2018年 1-2月2.0 前共有 3 个 App Store 版本更新具体查看：2.0 之前版本更新 2017年共 6 个 App Store 版本更新 具体查看：2.0 之前版本更新 2016年2 个 TestFlight 测试版本具体查看：2.0 之前版本更新 开始 2016年11月24日美国感恩节当天Info It 第一次上传至 iTunes Connect 1.0 例子视频👉🏻 视频来啦！ 打开即刻浏览文章，看到文章中有电影，于是用最快的方式打开了豆瓣APP（iOS10里的特性）然后浏览数据，浏览评论，看看这个看看那个，看完了返回即刻，便处于重新刷新的情况。（在这里我故意停留时间长了一点为了保证视频可以一次成功，但实际上经常会遇到这类问题，因为内存问题是不可能避免的，一个APP是无法在后台保持良好就连safari也经常需要重新刷新，更别说如果你这时候收到一个消息进去回复一下等等。） 最新的 iOS 10.3 beta 版本中更新了文件管理为 APFS，大大减少了软件回去会重开的几率，简直十分棒，但不停的跳转依旧是无法解决的！ 视频：Info It 会避免什么优酷视频 youtube]]></content>
      <categories>
        <category>iOS Develop（iOS 开发）</category>
      </categories>
      <tags>
        <tag>swift</tag>
        <tag>iOSDev</tag>
        <tag>iOS APP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「watchOS 4」那些值得一用的软件（17.10.20 软件列表更新）]]></title>
    <url>%2F2017%2F10%2F01%2Fwatchos%2Fwatch-app%2F</url>
    <content type="text"><![CDATA[关于又是一篇要持续更新的文章。。。 感觉给自己挖的坑有点多 - - 转至：持续文章更新列表，建议收藏 由于 Series 3 + watchOS 4 之后第三方运行速度已经大大加快，所以对于 Apple Watch 的使用将会略微频繁，希望能持续的更改和追踪自己用的应用，也给大家一个参考。 由于最近偏忙，先放软件列表，有空在更新具体的！ 这无： 不是长评测文章 不会有每个软件的详细测评 这有： 关于怎么使用的 持续更新，当软件不再使用后标明并注解原因 一些使用的例子 简单的介绍 欢迎去往文章：「Apple Watch Series 3」36 小时使用，简单体验及耗电报告，了解更多 Series 3 耗电情况~ 尝新者：尝试一切新鲜的事物 目录排序：安装日期排序，从最新到最早安装 应用后为安装日期，如果卸载会在加上卸载日期，不一定一定准确但基本没差别。(北美日期，有时差的哟) 如果从高频转为低频，会写上 “降 xx.xx.xx” 代表什么时间降级如果从低频转为高频，会协商 “升 xx.xx.xx” 代表什么时候进行了提升 高频使用 Life Cycle（17.10.19） Keep（17.10.13） Starbucks（17.09.26） CARROT 天气（17.09.22） Pillow（17.09.22） timetrack.io（17.09.22） WaterMinder（17.09.22） 低频使用 Runkeeper（降 17.10.02，安 17.09.22） Streaks（17.10.10） Flat Tomato（17.10.01） MoneyWiz（17.09.27） Tweetbot（17.09.26） WeChat（17.09.26） Forest（17.09.24） Deliveries（17.09.22） Due（17.09.22） ETA（17.09.22） Fantastical（17.09.22） Swarm（17.09.22） 已安装 Zones（17.10.25） Robinhood（17.10.19） Bookout（17.10.19） 内测中 HabitMinder（17.10.19） 航旅纵横 Pro（17.10.19） 已卸载 Beanstock（17.10.19 - 17.10.20） Pokemon GO (不好玩。。。之前测试电量下载的)（17.09.24 - 17.09.28）]]></content>
      <categories>
        <category>watchOS</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>recommend</tag>
        <tag>applewatch</tag>
        <tag>apple</tag>
        <tag>watchos4</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[📌 置顶：持续文章，栏目目录等 📌]]></title>
    <url>%2F2017%2F10%2F01%2Ftop%2F</url>
    <content type="text"><![CDATA[🔥 Code Activity over last 30 Days, update every day 🧐 En Blog Menu - Code Activity 请使用菜单栏进行栏目查看~ 这里仅仅为部分文章！持续更新文章中斜体加粗日期为文章最后更新日期。欢迎收藏本篇文章~ 持续更新文章：更新日期排序 🔥 Info It 2.0：查询电影/图书的超快工具 「watchOS 4」那些值得一用的软件 17.10.10 软件列表更新 Todoist 的一些用法和技巧（持续） 2017.05.28 「Podcast」播客推荐、信息介绍及单期节目推荐 2017.05.27：21个 「macOS」释放 macOS 菜单栏潜能的软件们 2017.05.26：15款 精选文章 「Apple Watch Series 3」36 小时使用，简单体验及耗电报告 Apple 开发人员计划的一年，一个再普通不过的学生的一年开发故事 2016-17 Omnifocus 2：这个让你又爱又恨的神 GTD 软件，究竟值不值得入手？ 关于 GTD。]]></content>
  </entry>
  <entry>
    <title><![CDATA[「Apple Watch Series 3」36 小时使用，简单体验及耗电报告]]></title>
    <url>%2F2017%2F10%2F01%2Ftech%2Fapplewatch3-36%2F</url>
    <content type="text"><![CDATA[序这篇文章主要是关于 Apple Watch Series 3 + watchOS 4 的耗电使用情况～ 软件开启等等软体验。 因为没有充足的时间，所以只有这篇简短的文章了～ 尝新者：尝试一切新鲜的事物 此篇文章欢迎去往文章：「watchOS 4」那些值得一用的软件 ，一篇将会持续更新的帖子。 使用设备Apple Watch Series 3 LTE 运动版本 42mm 总的时间使用来源于 iPhone 上的 Watch 软件的 ‘通用-用量’ 中，包含 ‘用量’ 和 ‘待机’。软件的使用时间以及体能追踪等时间来源于 ‘健身记录’。其他软件的使用时间可以自行进行计算，一般使用软件都很快所以不单独写了。运动软件及体能追踪的时间归属为 ‘用量’ 和 ‘待机’ 是由苹果决定，由于 Apple Watch 的时间统计没有详细的软件分析，谅解～ 本次使用及耗电报告，不包含任何 LTE 相关活动，相当于 Series 3 GPS 版本。 相关软件罗列这个统计时间内用到的软件，开启了后台刷新的软件，以及表盘上的软件。 总共使用过的软件指的是点开过的软件。 系统自带： 地图 呼吸 健身记录 日历 时钟 体能训练 心率 音乐 Siri 第三方： CARROT Weather Due ETA Forest Pillow Pokemon Go Runkeeper Swarm timetrack.io WaterMinder 打开后台应用刷新的软件包含自带以及第三方： CARROT Weather ETA WaterMinder timetrack.io 体能训练 健身记录 心率 日历 表盘总共使用的三个表盘，根据需求进行切换。附上 Watch 软件的截图，这样可以更容易看到表盘上都有的软件 耗电情况及使用统计数据显示： 待机：1 天 12 小时 用量：7 小时 23 分钟 约莫 36 小时待机以及 7 个多小时使用后，还有 28% 的电量，个人还是十分满意的。 软件使用占比及时间这里说一下大概的软件都怎么用的，耗电这个事情其实很浮动大，这次测试尝试多用了很多第三方软件，一方面是在 Series 3 上的开启使用速度相当满意并很愿意用，所以日后一定会有很多用第三方的情况，而且这次尽量只要可以都进行体能训练等等吧，这都是比较耗电的。 软件打开次数只是一个略记，因为特意测试所以有特别关注，不然谁没空记开了几次！表盘的后台刷新并不算在打开之内～ 系统自带： 地图：2 次打开，进行了查看地图，包括移动地图放大，没有导航 呼吸：1 次呼吸记录 健身记录：很经常会打开查看的，至少 10 次打开 日历：4 次打开 时钟：1 次打开 体能训练：4 次打开，2 次记录（后面会详细说） 心率：2 次打开 音乐：播放任何音频变会自动打开（设置里有开关），约莫 8 次 Siri：2 次使用，并通过其打开了软件 第三方： CARROT Weather：约 6 次打开 Due：1 次打开 ETA：3 次打开 Forest：3 次打开 Pillow：6 次打开，3 次记录（后面说） Pokemon Go：4 次打开，2 次记录（后面说） Runkeeper：3 次打开，2 次记录（后面说） Swarm：3 次打开并签到 timetrack.io：N 次打开并开始/暂停/结束活动（&gt; 20次） WaterMinder：约 8 次打开记录饮水 运动睡眠后台追踪运动追踪总共分三个软件使用，其中耗电从大到小排序为：Pokemon Go - RunKeeper - 体能训练。（个人感觉上的排名而已）睡眠追踪用的 Pillow iOS APP + Watch APP RunKeeper 跑步追踪，用到了 GPS，手机同时带着 总时间 20 分钟左右 跑步期间抬腕查看多次，应该和大多数人跑步看的频率类似 体能训练 户外步行 2 次，用到了 GPS， 手机同时带着 总时间 36 分钟左右 步行期间也抬腕查看了，但次数不多 同时也有使用了其他第三方软件例如：Swarm，timetrack，WaterMinder 等 Pokemon Go 步行追踪 2 次，用到了 GPS，手机同时带着 总时间 38 分钟左右 期间到达补给点用 Watch 直接转动大概 4 次 抬腕查看包含通知等大概 8 次 Pillow 睡眠追踪 3 次 开启了 ‘剧院模式’ 这里指的是开启了 Pillow 的 Watch 版本 期间包含早上等打开月末 6 次左右 总时间约 19 小时 小结详细罗列数据是因为每个人使用的追踪度不同，很有可能一个人每天体能训练就一个多小时，有的人有可能一次都没有，所以电量会有不同，详细的数据能够更加详细的参考。当然也不能保证不例外。 简单的来说，如果你看完了感觉你自己一天的使用比这个少得多，那我认为剩余个 40% 以上应该不成问题。如果使用的多很多，建议还是自己大概测试一下～ 至少总的来说我还是比较满意的！ 硬件与系统使用硬件相关硬件方面其实没啥好说的，因为实在没什么变化。从尺寸上来讲背部更突出了一点，第一天还有点感觉，后面就没什么感觉了，并没有太大的不适应感觉。屏幕的感光感觉的 Series 0 要号很多（就是最最最初的一代） 软件与系统之前已经在微博 @o1xhack 发过了一个打开多个第三方应用并且进行操作的视频，十分丝滑！ 再之后的不断突破使用后，的确会有被后台关闭了，打开程序需要刷新的情况，但是连一秒种都没有就会刷新完成，体验还是很好的。 在上个部分关于软件耗电使用情况中，我为了测试故意多选择了第三方应用，包括体能训练可以做到的一样去选择第三方来记录，在这之中基本上没遇到过几次内存完全耗掉并且需要重新加载的情况。遇到了之后也很快的加载了出来。 在从 Series 0 换到 Series 3，差不多两年之后，最大的感触莫过于系统层面带来的反应。虽说 Apple Watch 的确不能独立完成很多，哪怕加了 LTE 也是一样，因为所有的软件等等设置都需要 iPhone 配合，但这正是手表所应该完成的任务，至少在我的想法中目前是这样的。 如果你期望买到一个能帮助你提高生产力等等的手表我建议还是别想了，但是 Apple Watch 的确在健康方面下了极大的功夫，以及提高处理速度，增加电池储备等等，大部分人属于越戴越觉得没用，以往还会关心健康环有没有完成等等，但我却是一个越戴越有用的，至少在我个人看来，任何的软件，设备都是没办法帮助你抵消懒惰的，只有你自己下定决定，外部的配合才能够有用，而对于那种买来手表就将卡路里设定成 400，500，而实际平时只有 100 的人，奉劝一句：一口吃不成一个胖子，至少我吃不成哈哈！]]></content>
      <categories>
        <category>Tech 科技</category>
      </categories>
      <tags>
        <tag>tech</tag>
        <tag>hardware</tag>
        <tag>applewatch</tag>
        <tag>apple</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub - Awesome iPad]]></title>
    <url>%2F2017%2F07%2F01%2Fios%2Fawsome-ipad%2F</url>
    <content type="text"><![CDATA[Awesome iPadMore at GitHubBased on AwesomeHave 中文版本Also in English VersionWith mit licen≥≥ce Here is a place for collection of Awesome iPad APPs! This is launched at This Blog and for further contribution, copied to GitHub. Feel free to Star and Fork. Leave any suggestions and comment. Also need contributors! Base on awesome format. About means this APP support Apple Pencil. Content Photo Edit Note Taking Photo EditNote TakingNotability:]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>ios</tag>
        <tag>app</tag>
        <tag>github</tag>
        <tag>ipad</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「iPad Pro 10.5 + 罗技 Slim Combo」上手测评及使用，以及对比「iPad Pro 9.7 + 苹果 Smart Keyboard/罗技 Create」]]></title>
    <url>%2F2017%2F06%2F16%2Ftech%2Fipad-pro-10.5%2F</url>
    <content type="text"><![CDATA[序最近刚刚入手了就在前不久的 WWDC 上发布的 iPad Pro 10.5 版本，硬件的提升我就不在这里详细的说了，然后正好罗技发布了最新的配套 Slim Combo 键盘，于是有了这篇文章。 我将侧重对比一下 9.7 和 10.5 的外，以及搭配的配件方面的区别，分别是 Slimo Combo for 10.5，Create for 9.7，Smart Keyboard for 9.7 三款配件，其中 9.7 的已经用了有一年之久，10.5 的 Smart Keyboard 虽说键位有提升，但以我来看应该不大，如果为了确保，建议去店里自己体验一下。 我将会把我所能感受到的每款软件的优缺点，配合我一贯提倡的，场景化例子分析，让你有一个直观的印象～ 至于再多，不如去亲自体验一下吧！所有的观点都是我个人的，很个人，不要强行带入请自己分析参考！ 尝新者：尝试一切新鲜的事物 这篇文章使用 全文 9572 字（不包含目录一堆链接） 全文用 iPad Pro 10.5 + Slim Combo 打出来（iOS11） MWeb for iOS 编辑 Todoist 作为大纲 歌单《&gt; 不如码code…》 VSCO 照片编辑 提及的设备 Apple iPad Pro 9.7 （2016） Apple iPad Pro 10.5 （2017） Apple Smart keyboard for 9.7 Apple Smart keyboard for 10.5（没有用过） Logitech Create for 9.7 Logitech Slim Combo for 10.5 iPad Pro 10.5 + Slim Combo 搭配 MacBook Pro 2016 15寸搭配干活 目录 文章的确较长，但都是实打实的，你也可以挑着你想的看~ 两款 iPad Pro 外形 带壳后对比 9.7+Smart Keyboard 对比 10.5+Slim Combo 9.7+Create 对比 10.5+Slim Combo 9.7+Smart Keyboard 对比 10.5+Smart keyboard 三款键盘（壳）对比 先来数据对比 Smart Keyboard for 9.7 Logitech Create for 9.7 Logitech Slim Combo for 10.5 为什么需要控制键？ 键盘总结 Finally 两款 iPad Pro 外形网上有许多的图片视频来让你可以直观的看到两款的大小差距，我在这里也放几张我的照片～ 首先可以看出来，10.5 在一定程度上是能明显感觉到大了的，但是如果你摆在那里不对比，又不会有很大的感官感受，边框的细窄也是极为的美观好看。 官方的差距是（LTE 版本）：长度 10mm，宽度4.6mm，厚度一致，10.5 重量为 477g，9.7 重量为 444g。由于这不大不小的差距，所有的配件（壳，套类）全部需要重新购买，而当你从 9.7 转过来使用后，也是可以明显感受到屏幕的有所变大，最直观的感受就是当你分屏的时候隐隐约约感觉多了些空间！ 正面照 侧面叠起来 背面照 ps. 总觉得 10.5 的粉色没 9.7 的粉 233 带壳后对比首先所有照片都有角度问题，也许和实物会略有不同。 9.7+Smart Keyboard 对比 10.5+Slim Combo由于我并没有 10.5 的 Smart keyboard，所以只能有 9.7 的代替啦！无可厚非，官方的是最轻便的。 具体的占地方对比： 将 Slim Combo 设为和 Smart Keyboard 的一个角度后，我量了一下两个分别的长度占地， Slim Combo 是 30.5cm Smart Keyboard 则仅有 17.27cm 相差的主要是因为 Slim Combo 可拆分因此不可能叠起来。（具体可以看下面几张图的对比，数据测量是拍的侧面对比的那张） 9.7+Create 对比 10.5+Slim Combo这才是这次的重头，同样都是 Logitech（罗技）产出的专为 iPad Pro 设计的键盘，在这次 10.5 推出后，却推出来截然不同的键盘，这里我们暂且只看一下外观上的不同，后期会说到具体的，可以看到平放着大小其实不是很差，但是等打字的时候，Slim Combo 明显就占地要大大超过 Create！ 具体的占地方对比： 将 Slim Combo 设为和 Create 的一个角度后，我量了一下两个分别的长度占地 Slim Combo 是 30.5cm Create 则仅有 20.3cm 相差的主要是因为 Slim Combo 可拆分因此不可能叠起来。（具体可以看下面几张图的对比，数据测量是拍的侧面对比的那张） 9.7+Smart Keyboard 对比 10.5+Smart keyboard 图片来自网上哟～ 因为我木有 10.5 的 Smart keyboard 可以看出来键位的确是略微大了一点，Tab 尤为明显，但具体的感受建议还是去店里试一试吧～ 三款键盘（壳）的对比 不论我们多么的想要流行的，好看的，效率的还是什么的东西，我们都需要明白一点，每个人的需求，使用习惯，使用场景是不一样的！所以在这里如果可以，不论是优点还是缺点我都会具体举例为什么我这么觉得。 我先大概介绍一下我的使用习惯场景，用来给你参考：学生，在美国读大学，计算机科学专业，会写一些文章，评测。上课的笔记都用 Apple Pencil 在 Notability 上记录，cs 的教科书用 MarginNote 来看和标记。 同时，所有的优缺点都是我个人的感受和体验，如果我们的使用习惯场景不一样，很有可能你不会像我所写的那么觉得，如果重叠度较高，那你当然可以主要参考我的分析，否则，建议还是根据自身需求适当参考加上尝试使用，也欢迎你评论问我相关问题～ 先来数据对比 LTE 版本重量： iPad Pro 9.7：444g。 iPad Pro 10.5：477g 键盘重量： Smart Keyboard for 9.7：225g Logitech Create for 9.7：426g（15oz） Logitech Slim Combo for 10.5：526g（1.16lb） Smart Keyboard for 9.7优点 轻巧 225g 的重量基本上可以说是最轻的键盘了，仅有 iPad Pro 9.7 的 444g 的一半重，轻巧方便容易携带，并且茸茸的感觉很舒服嘿嘿 美观好肯，背面可见 大部分罗技的壳子都是背部被包起来的～ 缺点 角度固定 固定的几个角度可以选择，没有多余的方法和选择 Apple Pencil 没有地方放 我尝试过买笔套，可以套在 iPad 上，有收缩绳那种，但是套上去之后，iPad 在改变角度时将会异常麻烦，如果平着书写，一定要取下来，所以每次坐下来又得取下来，仿佛和没这个一样= = 打字舒适度 至少对我来说，打字很不舒服，我有尝试使用快一个月，怕是因为习惯了罗技的键盘导致的，但最后还是觉得是在太不舒服了，经常打错字，基本上打几个字就会错，需要修正，修改，因此对我来讲体验很差，最好的办法是自己去苹果店尝试一下，你甚至可以打一篇文章试试嘿嘿 手感我感觉其实也一般，圆形的键位打起来感觉很容易误触，或者按不到位，大概是这种感觉～ 控制键？ 我这里指的是像 mbp 那样的一排控制键 可以快速调节亮度，回到主屏幕，锁屏，调节音量等等这种 我会在罗技键盘部分详细解释为什么需要，场景是什么，目前，你需要知道的是 Smart Keyboard 没有！ 手写舒适度 由于 Smart Keyboard 折叠起来是有三分之一没有键盘的，因此当你平放的时候写字会明显感觉到有些许的不舒适，因为会有略微的摇晃 影响并不大，我认为除非你经常图画等，不会有太大的不适感 键盘没有背光灯 如果你不用，那好吧这不算缺点 Logitech Create for 9.7优点 Apple Pencil 有地方放 Create 是一体的，直接盖起来 Apple Pencil 是放在里面，非常安全也非常舒适，快一年用下来我对 Apple Pencil 的放置等没感觉到任何不舒服 打字舒适度 罗技的键盘，舒适感真的是一流！ 但还是那句话，自己去尝试一下！因为我的确碰到有人喜欢 Smart Keyboard 的键盘～ 写字舒适感 因为写字的 Create 是将它的键盘叠起来，所以是很平稳的，但是也只能一个方向，如果你想要换一个方向 - - 只能去下来了！ 键盘控制键 我会在讲完 3 款键盘各自的优缺点后，在专门讲一下这个～ 键盘背光灯 缺点 比 Smart Keyboard 要重，美观度差一些 426g 的重量差不多是 Smart Keyboard 225g 的一倍不到，基本上已经等同于 iPad Pro 9.7 的 444g 了 感觉带了两个 iPad 没办法露出背部～ 角度固定 一个坐起来，一个躺下去 Smart Keyboard 都能有三个角度呢 Logitech Slim Combo for 10.5 这是三款里面最重的，由于我的到货差不多也就是一天，其中拿着出去了两次，背包里一次，所以感受都是短时间的记录，如果有不全或考虑不到的地方请告诉我～ 优点 可拆卸，方便！ 可以拆卸，真的方便 并不是说出去不带键盘更方便了，而是使用的时候你可以根据你的实际情况来决定 比如因为这个占地方，你可以在地方不多，又不太需要键盘的时候将键盘放到一边 比如我在写 Code，然后 iPad 放着一些搜到的文章，stackoverflow 问题等等，就完全可以拿掉键盘，对于控制浏览网页反而更方便（看后面的配图） 官方举例：使用 Face Time 可以竖起来放着 一边在 mbp 上写文章等，一边 iPad 放着美剧等 需要阅读东西，写写画画 当然你也可以不带着键盘出去，比如你出去的时间很短你就知道键盘完全可以不带 出去买杯咖啡，顺便在星巴克写点画点东西 出去遛狗，坐下来/买咖啡/等等 直接看会儿电视剧等等 无限多的角度 我会附上三张图，一张除了平方外可以最平的角度，一张中间的，一张最竖着的 因为后面的支持是可以调节的，而且一天多用下来，十分好用超级好用 你可以根据桌子不同的高度随意的调节，让你保持最好的水平面 对颈椎好，各种咖啡店的桌子都是不一样的，之前我一直不能调角度，有时候看久了真的不舒服！ 你可以随意的放远近，之前角度的限制，放太远/太近都会观感不好 你可以竖起来！ 再次官方举例是Facetime的时候，放在那里看 其实任何时候都可以，比如看一张长图用来参考，横屏不全等 键盘舒适度 和 Create 差不多，罗技的键盘打字真的不是一般的舒服和爽感，一如既往的精准 由于下面多了一点地方，感觉比 Create 的打字还要舒服，不懂为啥0 0 键盘控制键！ 哈！还是控制键，等我稍后说来 键盘背光灯 缺点 重量！占地方！ 526g 的重量已经比 iPad Pro 10.5 本身的重量还要重了 这是整个键盘最大的缺陷和缺点，没有之一 盖起来后会晃动 由于是可拆卸的，扣起来后，是可以略微的动的 导致 -&gt; 有可能你放好使用时，键盘没有接触好，需要重新接触一下（目前看来概率还很小） 打字，手写转换较麻烦 还是那点，由于是可拆卸的，如果你想要放平手写需要取下键盘，收起支撑，然后才可以 这样导致如果你刚放平突然想起来要打字，或者打字和放平平时换的略微频繁，就会十分麻烦 最后的结果是，如果不是还要打很多字，你就会直接用虚拟键盘了 以我之前 Smart Keyboard 和 Create 的经历，一拉一滑我都是随便切换，基本打字就换成键盘哪怕一点 书写问题 由于背壳包起来，所以四边是略微突出来的，而做右下角也是有突出，所以如果纯手写写到一行最后面，会略微的卡着并不太舒服 可以解决，略微歪着写那边缘的就好 放 Apple Pencil 的地方 有地方好是很好的 但由于放在外面，我不论是正常只带 iPad 还是放到包里，我都需要额外的注意那个充电盖子，因为很怕一不小心撞到碰到就滑掉了 小心就好，没啥大事～ 就算丢了也不是大事嘿嘿 为什么需要控制键？其实如果你使用过 MacBook Pro 的话，应该是有体验的，虽说现在 TouchBar 了，但依然是有控制键的啊，而且还根据软件订制了呢！ 先来看一下罗技官网给出的快捷键图片和指示 目前控制键可以做到的功能 Home 键 单击回到主屏，一次 Home 效果 双击多任务界面，两次 Home 效果 亮度控制 Spotlight 激活 等同于 cmd+空格 的激活效果，但更快 虚拟键盘激活 打开关闭虚拟键盘 键盘的灯光控制 播放控制 暂停/播放 上一首/下一首 音量控制 可以一键静音 屏幕锁定/解锁 解锁后按 return 键直接进入输入密码界面 有一些功能我完全不认为是十分有用的，但其中一些功能让我爱不释手尤其是当初用了快半年的 Create 后突然想轻一点买了 Smart Keyboard 一个月后，一个十分关键的换回来的原因，我来解释一下几个用处的好处以及场景使用。 这里要重点说一下的是：如果你不是一个重度键盘的使用者，请一定要参考我的使用到你自己的身上！有一些功能是在使用键盘中更方便快捷的功能等 Home 键这个的用法我就不用多说了，一下两下都可以 当你在用键盘的时候，如果用手势（四个/五个手指合拢）去关闭软件，或者四个手指向上（iOS11 中可直接底部上拉）去激活多任务界面，可以说是非常违和。 哪怕你用键盘激活了这些，还是要用手去点击一个软件打开，或者点击激活一个任务，但直接用键盘去激活就是少了很多违和感。 并且如果你跟我一样是比较容易出手汗，尤其是夏天233，我就很不喜欢去用手势激活这些，因为不舒服 0 0 还有一点，如果你用手势去激活，你的手臂需要抬上去很多，相比较你打开软件要高一些，所以非常不舒服，感觉不停的抬高放下来这种，但如果用键盘，感觉更像是伸手缩手这种样子。 亮度控制！我的天，我实在无法想象，用 Smart Keyboard 每次都需要自己手动划出来控制中心然后调整亮度，这简直就是用键盘会碰到的最糟糕、最无奈的违和表现和体验。尤其是如果你不喜欢开自动调节亮度（就像我），我无法想象打字打到一半，想调一下亮度需要再硬生生的用手去调节的感觉，真的太糟糕了。 哪怕你没有打字，用键盘直接控制也比你按音量键、激活控制中心的感觉好的太多 这是我没办法逃离控制键的一个大原因之一！ Spotlight 激活难道你还不用 Spotlight？你不知道用 Spotlight 找到一个 App 打开是你自己手动的 x 倍？尤其是 iOS11 又有了速度上的超级优化～ （iOS11 前的版本）我一般都是直接激活 Spotlight 然后搜索应用，然后直接上下键选择想要打开的应用，然后 Return 打开，完完全全的不离开键盘哟 （iOS11 开始）Spotlight 的搜索层级发生了变化，首先会出来 Siri 建议，而且超级快的出现，这里都是软件，如果搜索结果只有一个对应的软件，那么直接按 return 便可以打开，如果有多个结果你可以继续输入完整应用名变成只有一个，或者，按 return 进入详细搜索（iOS10），上下键选择并打开应用 （iOS11 开始）你可以搜索辞典！这意味着，你可以不开任何多任务，仅仅使用键盘激活，查找，查看，返回。 （iOS11 开始）直接拖动找到的软件，激活多任务！比你去桌面在找要快得多，而且如果你找到的软件在不同文件夹里，你只能先打开第一个，关闭，打开第二个，再从 dock 激活前一个，但现在直接从 Spotlight 拖出来便可以激活。 除此之外，Spotlight 可以干的更多： 打开建议的网站，搜索，我经常用 搜索支持的软件的内容 Notability 的笔记 日历项目直接查看 Todoist记录的笔记 欧路词典的单词 Dropbox 的文件 等等 播放控制这种就是属于，当你习惯了之后一定会爱不释手，因为你习惯了用键盘直接播放暂停，切换后，你就会觉得需要专门激活控制中心调整将是一种浪费时间的感觉，明明有更好的办法，为什么要选择用违和的，复杂的呢？ 音量控制和亮度控制，播放控制的感觉其实是差不多的感觉。 举个例子，你正在看纸牌屋，你想调节声音了，你需要把手抬起来按住 iPad 侧面的音量键。而有了控制键，你只不过需要点击两下便可以。又或者你播放着歌曲在用着键盘，想要调整音量？又一次，按侧边音量键，或者激活控制中心，但你现在只需要控制键点击几下。 屏幕锁定/解锁这个最最最方便的就是解锁和锁定的两个场景： 你需要离开座位买杯饮料或者去个卫生间等待那个，点击一下，屏幕锁定，否则你需要专门点击一下 iPad 上部锁屏按钮 你回来了需要解锁，正常的来讲你需要按下解锁按钮，用手指输入密码。现在你可以点击解锁的控制键，按下 return 进入输入密码的界面，输入密码！ 最后很多的情景都是和打字，使用键盘相互依赖的，因为在使用键盘的程度越深，你就越能感受到两个加在一起后，那种丝滑的感受。而这些也许都是一些小的细节和使用，但挡不住积少成多啊。 我无法想象，准确的说我尝试过使用 Smart Keyboard 一个月，依旧无法离开这些功能，我记得最体现的一点就是：已经用了快一个月了，我还经常按到 Smart Keyboard 的一排数字，想要像以前那样快速的控制这些。 键盘总结如果你觉得 Smart Keyboard 的那些缺点，打字感觉，没有控制键，角度限制等等都不是大问题，并且你用键盘的频率没那么重，更喜欢轻便的，那我当然会推荐你买 Smart Keyboard！ 如果你沉重、占地方和没那么美观这些痛点都可以忍受，并且会经常使用键盘，如果你更加已经习惯了控制键的感觉，那我一定推荐 Slim Combo。 如果你不知道自己使用键盘的程度能不能抵消重量带给你的不方便： 如果所在地区可以 x 天内无条件退货，不如直接买了 Slim Combo 试试～ 如果不支持，身边的人有可以体验一下 如果实在不行，去苹果店体验吧～ 虽然只是短暂的 并且你需要考虑的是这些点： 重量会让我极度感到不适应？ 打字的体验和控制键的方便会让我哪怕打字较少也会有很不舒服的感觉？ 说白了就是，重量不舒服更让你无法忍受，还是打字感觉、快捷控制、多个角度呢？ Finally这篇文章着实有点长了 - - 如果有任何细节没有覆盖到欢迎询问 最后还是那句老话 根据自己适合的使用条件、场景、用量去选择你的工具，比跟风要效率的多～]]></content>
      <categories>
        <category>Tech 科技</category>
      </categories>
      <tags>
        <tag>tech</tag>
        <tag>hardware</tag>
        <tag>apple</tag>
        <tag>ipadpro</tag>
        <tag>logetich</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Apple 开发人员计划的一年，一个再普通不过的学生的一年开发故事]]></title>
    <url>%2F2017%2F05%2F17%2Fappledev2016%2F</url>
    <content type="text"><![CDATA[前言 开发者：开发这个世界. 2016年6月16日，Apple Developer Program（Apple 开发人员计划）正式开启。 就在昨天，2017年5月16日，收到了来自苹果的邮件，告知我还有 30 天资格到期，提醒我续费，一时间不禁有点感叹时间的流逝，也萌生了写一篇这一年的开发精力的文章，留一份备案，也给自己的下一年做一个提醒。 回顾了一下自己在学业之余开发软件经历的事情，感受的事情，以及一点一滴的成长吧。 量化/总结这一年里我自学开发，自学 Swift 语言，实际上是从 16 年 9 月正式开始搞开发，10 个月的时间里，App Store 开发者 Yuxiao Wang 旗下上架了四款 APPs。但实际上拿的出手的只有后面两款软件，具体原因下面会说到。 比肩许多个人开发者觉得自己其实很差，看到别人开发的软件总是不自觉的赞叹好，看看自己的，叹叹气哈哈。但在开发的过程中，一次次的被自己激励，被使用的人激励，总想做出点什么，做的几款软件都很小众，但都是自己的需求，也是希望能在开发的路上慢慢向上爬，毕竟珠穆拉玛峰不是一步便到的。 在这一年里，开发人员计划是 $99 美金，每一款软件都是免费的，甚至都没有时间研究内购请喝咖啡，因为学业的确繁忙，全是专业课，每次写软件时都是找到一个功能需要加入或者找到一个 Bug 想要修复。所以一年下来，App Store 里的销售是 0 元，连开发人员计划的钱都木有赚回来嘿嘿，希望下一年可以把这个 99 美金赚回来！ 一共四个软件 上架时间分别是 2016年9月28日，2016年10月24日，2017年1月8日，2017年3月30日。 时间其实差的还挺大的，但是总的来说从 2016年9月中旬的开发到 2017年3月30日，一共半年，4 个软件我还是颇为觉得满意的，并且没有放弃哪怕一个（Liquor It 会在后面解释）。 9 个 App Store 版本更新App Store 里总共有 9 个小版本更新，主要是 Info It 和 Coffee It，但是在 iTunes Connect 里，有更多的上传版本，而在 Xcode 上，更有许多没有上传的版本。 Info It 有 11 个上传版本，总共 20 个小版本（build） Coffee It 有 15 个上传版本，总共 19 个小版本（build） 25% 的时间通过 timetrack 的不完全统计，学习和编程一起，编程占据了我生活中的 25% 的时间，其中包括学习开发，设计等。在 2016 年下学期，四门 cs 专业课的情况下，我已经很知足了，有时候学业繁重很累，但是 iOS 开发总能带给我快乐，记得无数次熬夜和通宵的研究，累但很快乐，很满足。 万事开头难作为一个自知执行力不够强，容易拖延的人，在美国这个没人管束肆意妄为的地方，要下定决心学一个新东西还真不容易。 但我好歹还是做到了，从 16 年 7 月开始陆陆续续的学习 iOS 开发，Swift 语言，觉得学的异常平淡，最后发现还是实践才能得出真理，正值 iMessage Sticker 发布，看了一下看法流程，真是异常的简单，根本都不用编程，于是就做出了一款表情包并且上架。说实在的，iTunes Connect 上架等流程第一次弄真的有点懵逼，所以说，把一件事情拆成两个事情来分别做还是有好处的。 从这个表情包开始，我无需担心和 iTunes Connect 一切相关的事宜，专心致志写代码就好。 在这之间还有两款表情包因为需要获得授权，而被拒绝因此没有办法上架~ 一个契机？刚开始的时候我也不知道想做什么，准确的讲想做的十分多，一个个都是大项目，各种好的功能，完美的 UI/UX，但一打开 Xcode 发现无从下手，果然，还是得从最基础的做起，于是先是开发了 Liquor It，让我了解了很多基本的开发元素，开发要领，等等，也仅仅是作为练手项目而上架。 就在今天，收到了一份 Info It 的评论，首先给了个五星，并且表示 Liquor It 对于他来讲也很有用，希望可以继续开发，不得不说还是小小惊喜了一下，并且回复了这个评论人，只要是我力所能及的一定去开发下去！ 在 Liquor It 上架后（一开始不叫这个名字，叫 xLiquor），想过做一个类似于 Today，Streaks 这种习惯养成的软件，或者读书记录整理收藏软件，或者一个可以包含国内韩国这种电视剧的追踪软件，但一个个都是大项目，不得不说当你定的目标太高的时候，是很难一下子跳上去的，而那时候正好是 Price Tag 发布不久，再加上自己平时对于电影、图书查询的需求，以及糟糕的体验，萌生了开发一款类似于 Price Tag 的模式的插件（类似 Pin），可以让用户在看微信文章，微博文章，微博，任何文章的时候选中出现的电影名字，分享，直接查询对应的豆瓣电影，以及豆瓣书数据，并且可以和美国著名的 IMDb、烂番茄结合，因此 Info It 诞生了。 说干就干那是 16 年的 11 月，即将到来的是感恩节的假期，记得很清楚，2016年11月23日到11月27日，而在11月21日周一有一门 midterm 考试，但我相信很多人都有这种感觉的，一直没有头目的事情突然有了清晰的目的，你会想要放弃手头的一切，抓紧将这个想法尽快实现，然后独自给自己倒上一杯威士忌，庆祝一番。 于是我在周一 21 日有一门考试的情况下，从周五 18 号开始到 20 号一共用了将近 15 个小时（包含 21 考完试后的一个小时设计）将 Info It 的基本框架的软件写完，在这期间，不懂就查，不会就看文章，结合官方的文档，一步步研究，一开始先用最简单的 Webview，然后慢慢想办法用 Safari View Controller 代替，不得不说付出没有白搭，Info It 的开始总算没有半途而废，这期间遇到了很多复杂的问题，都一一被解决。 谁不累？就在一边写 Info It 一边准备考试的那几天，突然觉得想出去散散心，呆的又的压抑，于是去了之前就一只想去的 KAWS 在德州达拉斯的展览，说走就走，分分钟买了机票定了酒店，还是在不经意间告诉我姐然后被我妈妈知道，批了一顿，说我不提前报备，一个人去太危险 balabala，当然被我想尽办法搪塞过去了哈！ 不得不说，适当的休息和娱乐还是对于身心放松很有好处的。 难忘的感恩节这可以说是最难忘的一个感恩节了把。22 号飞过去，24 号飞回来，从 20 号到 28 号，一共上传了 7 个测试版本，部分是给自己测试，部分是发放成 TestFlight 测试。 这几天因为飞来飞去，在加上休息了一些时间，还看了展览，吃了好吃的牛排，看了电影，所以前几天没有每天花很久时间。 据不完全统计下，从 22 号到 28 号一共用了 20 小时在写 Info It 上。 22 号在飞机上完成了 APP 设置的界面和细节，第一次体验了在飞机上写代码的体验还是挺糟糕的哈哈。 23，24，25 在达拉斯除了看展览休息意外，每天花了将近三个小时，在宾馆，或者在星巴克完成对 Info It 的小版本迭代，修复，更新，功能增加和改进，如果我截图没有删除，应该是放了 4 个 TestFlight 的测试版本，在微博上经过几轮转发，总共有差不多 200 多人参与了测试，当然有很多只是报了名，没怎么用过，但自己也是很知足了。 现在还记得，在 24 号感恩节的当天，达拉斯这种小地方饭店全部关门，就星巴克开着，于是去星巴克随便吃了点打发午饭，开始写 APP，然后猛然间看到飞机时间要快到了得去机场了，于是叫了一辆车，但那时候正在尝试 Info It 的网页浏览嵌入 svc，专心致志，上车后继续写代码，于是又解锁了在 uber 上写程序的成就，并且在到达机场之前上传到了 iTunes Connect，也是松了一口气。 不得不说，谁不累？妄想着每天享受生活依旧写出来好的 APP 当然是不现实的。 感恩节，感恩。在感恩节期间，遇到了 Info It 里面碰到的一个十分棘手的问题。 Safari View Controller 在嵌入进去后，和一个个按钮并存的情况下，不论怎么办，打开都是空白一片。一下子懵了，要知道 Safari 在 Info It 中的作用可是很重要的，有了 Safari 的嵌入可以记住登录状态，会变得更方便。 在研究了许久，各种查找问题，甚至重启电脑，重装 Xcode，写一个新的程序测试，缺仍旧解决不了任何问题。在这期间，和 Pin，小历，TodayMind 的开发者 @钟颖 交流许久，他甚至还专门写了测试的程序让我运行看到底是什么问题。 毫不夸张的说，感恩节遇到了值得感恩的事情，这是一件十分幸福的巧合，让我在行走的路上有了更多的动力。 从 27 号晚上 11 点左右一直到 28 号凌晨 5 点，和钟颖探讨了关于这个问题，并且在他的帮助通过不同的方式测试了是否可行以及什么问题，然而不论怎么办都没有解决，而这个问题十分奇怪，不仅没有在网上查到任何相关的，在 Pin 上使用是完全可以，甚至我的手机上也可以，并且在钟颖发给我的测试程序中，他那里是完全可以打开的，我这里就完全不可以，一样的 Xcode 版本，一样的程序，虽然在交流了六个多小时之久后仍然没有解决，但在这烦躁的时间段内，有一个乐于帮助我的人，让我在深夜里感受到了温暖，而本有的烦恼、焦躁也一一消失。 这也是第一次因为 Info It 完全通宵，在交流完后，我继续自己的探索，通过不断的尝试近三个小时，一直到早上 8 点，依然没有解决这个问题，也让 Info It 的一个大特性不得不推后延迟，最终因为实在疲乏躺在床上睡着了。 弱者死于路中-- 来自清华大学副校长杨斌教授给《鞋狗》的推荐序 如果你也有这样的经历，那也许你也会有这样的感受，你在做一件事情，这件事情怎么都做不成，你没有做错，你的方法也没有错，甚至这很有可能只是因为 Xcode 的 Bug，这件事情不做成有影响，但还不至于大到让整个项目结束。这就是我遇到的困境。我完全不懂为什么，我完全不知道该怎么办，为了研究这个，我重新读了 APPLE 给出的通过 Xcode 找 View 层级的问题，尝试了一下，但依旧没有结果。 但是，谁想当弱者？ 于是，在 29 号我洗了个澡，吃了顿火锅，好好的休息了一天整理思绪，30，31 号用 6 个小时总算找到了解决的方式。 我一步步的复现最终想要做成的效果，一步步逆推，看是哪一步导致了打开页面会空白，在尝试了许多次之后，总算发现了玄机，至于是我电脑的问题还是 Xcode 的 Bug，真的不敢说，但至少不是我写的代码问题。具体的问题就不在这里 bb 了，反正是一个十分玄妙的 bug。 （短短的几行字无法描述这个疲累、焦躁、烦恼的过程，也无法描述解决之后的成功的喜悦、开心和满足。） 一拍脑门，靠，为什么我就没有在一开始就想到这种解决方法呢？ 没关系，至少我以后知道了。果然，日积月累是一定有用的。 期待和满足每件事情都有一个最期待的时刻，写程序的那个时刻就是上线 App Store。 只能靠自己粉丝为数不多的微博发送消息上限，也并没有预期多高，也没有进行所谓的大范围推广等，但还是很开心的，小确幸把。 每件事情也都有能然你满足的反应，写程序的满足应该就是看到 App Store 上面的五星评论和真心的觉得好用吧~ 到北京时间 2017年5月17日早上6点 为止，Info It 一共收到 14 份评论，的确不多，但每一份都是真正的使用者。对比下载量的话这个占比连 1% 都没有。对比下载了后真的使用的占比来说，我并不知道。我也不知道通常来讲百分比多少属于好的软件，百分之多少又属于用户粘性高的软件，但每一次发布新版本后焦急的刷新评价，看到一个评价后认真读，仔细看，盯着半天的那种感觉，真的很好。 有很多人，支持我，在看到 Info It 发布后，会专门下载下来支持，哪怕他们也许没有搜索电影这个需求，又或者是给身边有这个需求的人分享，每次刷到这些，很感动也感觉很幸福。 再次踏上征途Info It 在新年前又完成了一个大的版本推送，选择中文名查询 IMDb，烂番茄时可以自动转换成英文原名，不算太大的功能，但是对我来讲依旧需要用时间去学习和编写，而且也的确让 Info It 变得更加方便和简单。 在经历了使用各种咖啡软件记录每天的咖啡因摄入后，总算忍不了想要开发一款新的应用了，因此，Coffee It 就出生了。在衡量了自己的能力后，发现基础版本我是完全可以搞定的，于是从头开始学了 Realm 数据库的管理和使用，全面使用了 Realm Swift（学校里还没有上到 Database 相关的课程）。 从 3月15日 开始，到 3月30日 App Store 上线第一个版本，总共经过了 10 个小版本的上传，都是为了给自己在真机上调试以防出问题， 这一次，不管怎么样，没有遇到上次那样玄奥的 bug，而这开发之中的技术性问题我也就不给概述了。 一样是趁着春假的多事之秋，将 Coffee It 进行了各个版本的更新，而不论考试还是写作业期间，都掺杂着开发的日子和时光。 由于 Coffee It 相比较于 Info It 而言，更加的小众，上线也没有经过推广，评论就不说了，少的可怜，但 Coffee It 也的确还没有达到我的预期，还在路上，现在虽然有了历史界面，有了收藏功能，但在我看来还不够快，而历史的数据的挖掘还没有深入，属于不大有用的情况，这也是我这篇文章不怎么谈及 Coffee It 历程的原因。 设计，设计，设计 ）_（好的设计总是能让人心情愉悦，必然的，这是连我都知道，都会作为抉择使用的一个条件。 不得不说，我真的不是拖延也不是推脱，所有的开发 APP 的精力，都投入给了功能开发和稳定性上，而由于迫在眉急（已经到了）的暑假，实习更是让我想要加速 APP 功能的开发好有更多的竞争力。像我说的那样，我有自知之明，我会在未来的日子里通过碎片时间感受设计，慢慢培养自己的设计理念，也欢迎有相关的资讯可以推荐给我，下一年（2017年6月16开始，新的 APPLE Developer Program），希望自己能够让 Info It，Coffee It 的设计都上一个阶梯。 最后？不，这只是第一篇章，希望下一个篇章，能够更精彩。 如果按照是否有 APP 上架 App Store 并被人使用这个指标来衡量一个人是不是 iOS 开发者，那我应该算是一个。 但如果按照开发能力，设计和交互，等综合能力来判定，我只能算是一个小白。 这永远不是一篇技术文章，也不会是你的救星和鸡汤文，套用偶像 Elon Musk 的一句话 “我想要很清楚的说明，我不是任何人的拯救者。”，连 Musk 都有这种自知之明，更何况我们呢？ 谨以这篇文章，献给我 2016年6月到2017年5月的日子，也给自己来年一个警示和警钟，同时，告诉所有人： 努力思考未来，并且不抱着悲观的心态。 相关材料/链接这篇文章差不多花了 3 个多小时，一共 4000 个字有多，20 张图片。 我的软件Info It：下载，文章介绍Coffee It：下载 用到的软件图片编辑：LongScreen，Stitch It!，LightScreen时间追踪记录：timetrack.io版本上架记录：DayOne，iTunes Connect写作：MWeb（Mac）上传图床：iPic（Mac）]]></content>
      <categories>
        <category>iOS Develop（iOS 开发）</category>
      </categories>
      <tags>
        <tag>swift</tag>
        <tag>iOSDev</tag>
        <tag>iOS APP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Tech」Bose 新款 SoundLink Revolve 开箱以及对比 mini2（视频）]]></title>
    <url>%2F2017%2F04%2F29%2Ftech%2Fboserevolve%2F</url>
    <content type="text"><![CDATA[前言有那么点晚了，最近实在是太忙啦！ 原版视频连剪辑都没有哈哈，不过录了两三遍233 尝新者：尝试一切新鲜的事物 第二个视频调研接下来应该会录第二个，做个调查，麻烦把你想要了解的评论到这个文章，我参考，如果内容够的话我就抽空录第二个！ 想要对比的音乐？（直接给歌曲） 想要对比的功能？ 想要听到的介绍？ xxxxx（慢慢想嘿嘿） 视频]]></content>
      <categories>
        <category>Tech 科技</category>
      </categories>
      <tags>
        <tag>tech</tag>
        <tag>hardware</tag>
        <tag>music</tag>
        <tag>audio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「iOS」Todoist 的一些用法和技巧（2017.05.28）]]></title>
    <url>%2F2017%2F04%2F10%2Fios%2Ftodoist-using%2F</url>
    <content type="text"><![CDATA[转至：持续文章更新列表，建议收藏 开个坑开个坑，填不填的上就不知道了！碰到了就加上去吧哈哈！请根据目录来，或者直接文中搜索直达哟～ 这篇文章是关于 Todoist iOS 客户端的使用以及技巧，没啥大不了，都是一些小功能，有一些不容易发现，也给大家一个可以找找的地方哈！ 尝新者：尝试一切新鲜的事物 目录2017.05.28 播客节目 Cortex 第 47 期，关于 Todoist 想法的探讨（一些使用技巧探讨和思考~） 2017.05.26 设定默认打开的界面（可自定义规则） 2017.04.10 项目父级子级关系 已完成的子任务堆积怎么办？ Cortex #47 关于 Todoist 想法的探讨 #47 播放于 2017年3月7日，关于 Todoist 讨论共 40 分钟左右 Cortex 第 47 期，关于 Todoist 想法的探讨：32:54 Myke’s Thoughts on Todoist（pocket cast 时间戳分享，直接点击可以听取） 本期的讨论 Myke 说了一些关于它自己对于 Todoist 的想法和思考，我摘取这最重要的一段分享一下，整期节目也十分推荐，如果你对博客感兴趣，欢迎去看我的文章 播客推荐、信息介绍及单期节目推荐（21个） 总结 由于是英文，所以进行一些大概点的总结，可以看完之后在听，对于英文能力略弱的应该有一定帮助，而英文能力可以的一样可以看一下有个印象。 支持 Zapier/IFTTT，监控 Google 日历，为指定的事件增加对应的 Todoist 任务 Myke 举例当他的日历中有录播客节目的时候，就可以自动在 Todoist 里加入对应的任务 “加入 shownote” 理由：简单 @o1xhack 注：Todoist 在新版本中增加了对 Google 日历原生的接入和支持哟~ Slack 接入 在 Slack 中直接打字增加任务，并且可以带截止日期，标签，项目等 当有人在 Slack 里问 Myke 记得做什么的时候，十分快速连 Slack 都没必要离开 在任何 channel 都可以，并不是要找到对应的 Slack 机器人，没有限制 Omnifocus？ 嘲弄了一下 Omnifocus 不会加这种整合支持功能- - 就算加也得老久了！ 但 Omnifocus 的 forecast view 功能十分让 Myke 怀念 可以看到这一周的忙碌程度 Todoist 没有这种类似的，虽然有未来七天，但是所有任务的列表 举例，之前可以看到周一有7个任务，周二有5个任务，周三有3个任务，这样就可以很方便的决定把这个待定的任务放到周三去，但现在使用 Todoist 只能顺着列表一个个看下去，不够直观和快捷 Todoist 的重新安排功能很喜欢 通过机器学习的方法自动推荐过期的任务的新日期，十分棒！ 主要是通过判别未来每天的任务数来把任务安排到最不忙碌的日子去 Grey 也表示很喜欢这个功能！ Grey 不看 Omnifocus 的 forecast view！ Grey 表示 Myke 在说到 Omnifocus 时都会说到 forecast view 作为一个主要的点，但 Grey 自己却是从来不看 forecast，认为对他自己来讲是完全没用的：每一天有一个数字表示有多少任务对于他来讲没任何用，并不能对他做决定时候有效的帮助，因为任务之间是非常不同的，20个任务 vs 7个任务 vs 10个任务其实并没有任何实际的量化水准 Myke 也认同，他通常是看大概的估计，并不会觉得任务数少就一定是不忙的 @o1xhack 注：再一次印证了我一直强调的话，效率软件一定要看你自己的需求，有人喜欢这种表现方式，有人喜欢另一种，要完全根据自己的需求选择猜对~ Todoist 有周报告，Myke 发现上周平均每天完成了 7 个任务 这在之前堆 Myke 来讲属于十分忙碌的感觉 用 Todoist 的时候会加入更多的任务！而用 Omnifocus 的时候因为会看每天的任务总数，会按照数量来加 所以让他自己感觉自己更加有效率了 讨论了更多关于数字的这件事儿！ 讨论了 Todoist 的软件，感觉不像 iOS 讨论了 Omnifocus 的 Start Date（开始日期） Grey 认为是做的最好的一家，他十分喜欢！ 可以只显示现在就能做的，Start Date 在之后的在到达那个时间后再出来 Grey 希望当有一个任务是现在做不了，他喜欢这个任务隐藏起来直到可以做为止 举了母亲节买花的例子 @o1xhack 注：这又是因人而异，对我而言我就不在乎 Start Data，也许是因为我现在项目、学习、任务没这个需求，也许是我就对这个没需求，所以再一次，看自己的需求选择~ Grey 认为自己也是少数人233 Grey 说了自己对 Due Day 的想法和感觉以及对他的意义应该是啥 Myke 说了一个自己导致的迁移问题！ 两个人 bb 了一些 RSS，HTML，EMAIL protocol - - Grey 对于 Myke 问他 Evernote 用的咋样回答了 Fxcking great Myke 建议重头开始，选一个新的切入点0 0 两人 bbbbb 一些，很好玩哈哈 扯到了纯文本，OCR 迁移（时间错误） 在 automation 和 API 越来越多的情况下 Grey 认为也许在未来如果 Myke 需要迁移 Todoist 到其他的，应该至少能写一些东西可以做到最基本的数据迁移 Todoist 的自然语意识别无法相信的好 点击加任务，输入，然后按完成就什么都有了，截止日期，项目，标签，等等 Myke：就像 Fantastical 改变了日历一样，Todoist 改变了增加任务输入的方式 需要学习一些简单的 app 语言 有专门的重复任务的语言 一个页面专门解释如何实现各种重复任务，需要学习一下 问题：所有的重复任务，没有任何的 UI，除非你用他可以识别的语言重新写如何重复，否则你美版办法更改 Myke 表示他用了 20 分钟写了许多遍才把他想要的重复方法正确的实现出来，因为他一直在用他认为 Todoist 应该可以理解的方式写，但一直错误，然后 Todoist 又没有任何办法可以点击什么按钮就更改，不像 Omnifocus 那样又可以按按钮，也可以用自然语意。 Grey：有意思的是，自然语意这个东西，说白了当他可以被识别出来的时候就显得十分厉害，但当识别不出来的时候，就立马感觉像在 1970 年跟 Terminal 讲话一样 Myke 认为可以直接用自然语意当然十分好，但是没有一个 UI 作为备用基础是一个很蠢的想法，不明白为啥没有 数据统计 又十分有感觉，也有点没用 gamification（游戏化）还是有用的 项目？ 在定位一个任务在哪里的时候十分有用，更方便的找到 Myke 之前从没有用过 项目这个理念 最后 Myke 表示他很喜欢 Todoist 所以才会有很多不满意和批评的地方，这恰恰代表了 Todoist 对他来讲真的有用并且很喜欢用，如果没有觉得有任何做的不好的地方，那反而奇怪了。并且表示不会迁移回去 Omnifocus，原因原话：Because the things this app does better are so much better, and the things it doesn’t do as well maybe not as bad as I initially thought it would be. Myke 还说他目前想不到一个好的原因会让它重回 Omnifocus，他这么说：Omnifocus is a better iOS application than Todoist, the app are amazing. 并表示 Todoist Mac 就是个封装（@o1xhack 注：Todoist Mac 更新重新了应用更加适配），iOS 虽然是个应用但感觉一点都天然，但所有的小细节和让这个程序成功运行让他感觉十分有趣，因为在后台有太多有趣的事情发生，对于 Mac 2017 来说这是一个更加好的系统。 Grey 又解释了一下 Todoist 并不会作为他的首要工具，主要是和他的助理共享项目而用，并且解释了自己的原因，想法和为什么。并且和他助理的使用测试下来都很成功，对于两个人使用十分的方便和好，在它心里一定有一席之地，但也许不是首要位置，但谁知道呢~ Web API 越来越重要，Myke 说如果要下注，一定会下到 Grey 会用 Todoist 上~ 项目父级子级关系每一个项目（Project）之间的父子级别关系，是仅在你的账户中显示的，也就是说你这里的父子级别的项目关系在共享给别人后，别人是不会知道这个关系的，举个例子： 两个项目：「iOS开发」 和 「Swift学习」你将 Swift学习 放到了 iOS开发的下面，在你这里 iOS开发 就是所谓的子项目，当你将两个项目都共享给别人后，别人那里，这两个项目拥有同等的级别，都是主项目，谁也不是谁的子项目。 已完成的子任务堆积怎么办？如果你创建了一个主任务并且添加了许多的子任务，而这个主任务又不会短期内就完成，那一段时间后你的主任务里面便会有一堆灰色删除线的子任务堆积。在一个子任务已经被玩成后，你可以通过对这个子任务从右向左滑动，这个已经完成的子任务便会彻底不显示。 设定默认的打开页面 发布于微博 @说一SayOne made by apexidea 当你打开 Todoist 的网页时，你最想看到什么？是你今天安排的工作任务，还是你那塞得满满当当的收件箱？这一切你都可以自己做主。打开设置 - 偏好设置 - 起始页，你就可以选择和自定义显示在起始页的项目。当你点击左上角的 Todoist 图标时，就可以快速访问起始页。就我个人而言，我习惯将起始页设为收件箱、过期任务和今天事件。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>ios</tag>
        <tag>app</tag>
        <tag>review</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS APP：Coffee It - Track Caffeine in Simplest Way]]></title>
    <url>%2F2017%2F03%2F20%2Fcoffeeit%2F</url>
    <content type="text"><![CDATA[IntroCoffee It is an iOS APP that builds for those who drink Coffee a lot. There are a group of people who want to log all Caffeine they drink each time. And from all iOS APPs, most Caffeine Tracker APP are abandoned in a few time, without further bug fixes and improvement, the APP is difficult to use. The rest are expensive, and less functional. This is why I develop Coffee It. Please download Coffee It - Track Caffeine in Simplest Way and give a try! For me, it only takes a seconds to log the coffee before I throw the empty cup, so if you feel it’s not that good to use, give me feedback and I will try my best. Using telegram to give me feedback: @o1xhack As a student with spare time for these APPs: Leave a 5-star if you like it or want support me! AboutI’m a student in Computer Science, and I learn Swift and iOS Development myself. This APP may not fulfill every coffee lover’s requirement, but I will keep developing it with any feedback! I cannot assure I can do every function since I still need time for my University Study, but with my spare time, I will do my best in improving it. As you can see, I’m consistently making Coffee It faster and easy to using, for me, it only takes a seconds to log the coffee before I throw the empty cup, so if you feel it’s not that good to use, give me feedback and I will try my best. Features I put all my time on my developing process (beside student works) that I don’t have time to write a whole article for features, here are the summary. I sincerely appreciate you give me any advice or leave a 5-star with comment! Complete DataBuild-in caffeine data will fulfill most normal situation. Fulfill most normal routine log. FavoriteFavorite what you like and add in seconds Quick, Fast like flashThe only thing you need to care is to choose the type of coffee. In Favorite List, single click to confirm add without more steps. Set History as default view, and click any history to add that data, quick like Flash! CustomizeMake your list and store specific type. Customize your life and your mood! (: ConvenientOpen it, Log it, and View it. Minority Function: Set Badge to number “1”, and put inside a folder, 3D Touch folder to quick open Coffee It, and log coffe! Daily Total and LimitationView all your history! (integrated with Health) See your daily total intake and percentage of the daily limitation​(300mg) FutureI have ideas about history analysis, data analysis, and I will try my best to develop it, but I cannot promise to update every feedback in time, but I will do my best to keep Coffee It up-to-dates. I’m using it too! Upvoted on ProductHunt Please give the app an upvoted if you can! Update TimelineYear 201710.9 App Store: 1.7.6TOP: Watch APP is in progress~ For all Soylent drinker, here we are! Cafe Coffiest Cafe Vanilla Cafe Chai Starbucks Coffee add：Iced Flat White Starbucks Beverage add：Cool Lime Starbucks Refreshers 9.28 App Store: 1.6.13Coffee It already supports iOS11, if any problem, contact me please.Also In-App Rate system added! Please give a 5-star! Since the latest Apple Watch got a really fast speed to open 3rd APP, Coffee It will come up with a Watch APP, but won’t in few months. This semester cannot be more busier and I will try my best to maintain all LifeAnalysis Lab APPs. This is an update with plenty data update and detail changed. History View now shows the number of cups you take. (Some person may drink not exactly one cup) Starbucks now seperate into two new groups: Starbucks Coffee and Starbuck Drinks Just to let you know, there are still caffeine in lots of Drinks! Please check them and make your life better! New coffee data in Starbuck Drinks Strawberry Acai Refreshers Pink Drink Ombrè Pink Drink Iced Black Tea (Lemonade) Iced Green Tea (Lemonade) Update coffee data in Starbucks Coffee Caffè Latte Caffè Mocha Caffè Americano Nariño 70 Cold Brew I find out some coffee got different caffeine date with Iced compare to normal Hot one. Iced Coffee (Unsweetened) Iced Coffee (Sweetened) Iced Caffè Latte Iced Caffè Mocha Please notice when you drinking an Iced one, it’s normally got more in Venti type, also, you can submit a Request new Coffee types to help me add these data. Update Localization of Chinese UI Constraint change. 7.17 App Store: 1.6.6 Using Fabric to analysis now. No privacy problem! Won’t sell or give any data~ Just help me to learn how user using functions. Localization Chinese fix. Fix in Settings. No big update for this version. From data, Coffee It has extremely little users, if your friends love coffee, track stuff, welcome to recommend Coffee It! 6.23 App Stroe: 1.6.5 History View layout change! Easier to see the data~ New in-app notification UI Change in 4 other places, Please let me know if you have other advices Click to add at History View Add new list at Coffee View Feedback at Setting View New feature of the update version, this one it is! New launch screen! LifeAnalysis Lab is founded!(only me233) Send Feedback email from settings 6.12 App Store: 1.5.5—- Click in History to Add —-Fast like Flash! Now you can click any single history in History view Then a confirm alert shows with details Click and, that’s it! —- Set Default Open View —-With the Click in History to Add functionIt’s better to let your choose the default open view History view or Coffee view —- Localization —-Since you all using En, I’m not introduced a lot.Just support most view/alert with Chinese —- UI/UX —- font unify UI unify (add to favorite change to Green) tab bar name change —- Bug? —- fix showing of History bottom view fix too many digit number(1.2222222%) in History Today view. some alert fix 5.29 App Store: 1.3.13—- Total Toady Caffeine —- Now you can view total caffeine intake of today, the percentage of daily limitation(300mg) The percentage label will present RED if you get the limitation All data sync from HealthKit —- Show Badge of 1 —- Coffee It will ask for the request of notification, and then Coffee It will have the badge of “1” for all time until you close this setting. After you open this, you can put Coffee It inside a folder, and 3D Touch the folder to quick open Coffee It with one step. —- Localization —- Now History daily goal view supports Chinese. Go to APP Settings and open 「本地化中文」 4.17 App Store：1.3.3 Delete in History view New Setting UI New Setting: Confirm Add Alert in Favorite View Auto layout fixes URL Scheme basic support Bug fixes 4.5 App Store：1.2.2 Favorite function! Coffee Data support Chinese language Add more coffee types Bug fixes 3.30 App Store：1.0.0 All basic adding, deleting, editing View controller and app info Health Data access and check Beginning 2017.03.16Coffee It first time update to iTunes Connect Caffeine Data Request If you have any Coffee Brand or types want to be added as Default. Fill the form. PolicyPrivacy Policy Caffeine Data Sources Policy]]></content>
      <categories>
        <category>iOS Develop（iOS 开发）</category>
      </categories>
      <tags>
        <tag>swift</tag>
        <tag>iOSDev</tag>
        <tag>iOS APP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Coffee It - Privacy Policy / Caffeine Data Sources]]></title>
    <url>%2F2017%2F03%2F18%2Fcoffeeit-policy%2F</url>
    <content type="text"><![CDATA[Coffee It - Track Caffeine in Simplest Way (Still Testing.) Privacy PolicyThis Privacy Policy relates to my use of any personally identifiable data (”Personal Data”) collected from you when using Coffee It. For now, I only read and write to APPLE Health APP through HealthKit, which is totally secure in transition. Coffee It now doesn’t have any server to collect or analysis these data. What Personal Data will I collect and using for?Coffee It is currently a track caffeine taken app, so I only ask for your permission of Caffeine write and read right directly from Health APP. By using APPLE’s HealthKit, all the data are secured and won’t affect your life. For now, I won’t do anything to your data including but not only analyzing, transfer to server … I only show your data in the app. Cookies:Same, Coffee It doesn’t need to be connect to internet so there are no cookies now. Data Using.I will only show your data if your want and always not to share anything data through anyway if you don’t want. EnforcementI regularly review my compliance with this Policy. Please feel free to direct any questions or concerns regarding this Policy or my treatment of Personal Data by contacting me through my website. Changes of Privacy PolicyCoffee It may change from time to time. As a result, at times it may be necessary for me to make changes to this Privacy Policy. Accordingly, I reserve the right to update or modify this Privacy Policy at any time and from time to time without prior notice. Please review this policy periodically, and especially before you provide any Personal Data. This Privacy Policy was last updated on the date indicated above. Your continued use of Coffee It after any changes or revisions to this Privacy Policy shall indicate your agreement with the terms of such revised Privacy Policy. ContactingIf you have any additional questions or concerns about this Policy or information practices, please feel free to contact me at any time at from my website or app. Caffeine Data Sourcesup-to-dated caffeine data sources list. Other than these sources, I also advice from Caffeine Informer, a website that have plenty data, to make sure my data was correct and enough. Capsule CoffeeNespresso Official website ps. The official doesn’t conclude every specific type, but give me the range of a big type, so I take the average from the range. Coca-Cola Official website Local market Dr Pepper 3rd party Official website Food RestaurantsMcDonald’s Official website Local restaurant Monster Official website Local market Pepsi Official website Local market Starbucks Official website iOS APP]]></content>
      <categories>
        <category>APP Policy</category>
      </categories>
      <tags>
        <tag>ios</tag>
        <tag>app</tag>
        <tag>policy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Omnifocus 2：这个让你又爱又恨的神 GTD 软件，究竟值不值得入手？ 关于 GTD。]]></title>
    <url>%2F2017%2F03%2F12%2Fios%2Fomnifocus%2F</url>
    <content type="text"><![CDATA[更新序本文章初始发布于 2016 年 1 月左右，但在经历一段时间的使用和自我调试中，发现按照我自己所写的文章来看我并不适合用 GTD 以及复杂的软件，所以最后换成了 2Do，又再次换成了 Todoist，目前对于 Todoist 十分满意，也更加对于选择一个适合的工具更加认为重要~ 尝新者：尝试一切新鲜的事物 本文附有态度，持 值得 态度，文风不保证科学般的严谨。 每每看到别人随意一张截图就是下图那种排列组合完美的列表就觉得羡慕？ 随随便便看到对方一个微博就是 OmniFocus 截图的今日代办列表？ 但这个 258 元的 OmniFocus 2 加上内购的 128 元 Pro 版本，总价值接近 400 元的 OmniFocus 2 究竟值不值得？（iPhone/iPad 通用，Mac 版另外收费） 这个传说中的 神效率 软件，屡获 APPLE 嘉奖和众多科技行业人士嘉奖的软件究竟值不值得？ 初尝 OmniFocus 时和许多人一样，顿时心中叫骂这究竟是什么破软件浪费了我这么多钱？ 在给了 OmniFocus 一年的空窗期，OmniFocus 升级 2 时总算又重新有了尝试的念头，抛弃了一切杂念和负面影响，老老实实的问 Google 老师找教程，又观阅了知乎大神的众多回答，国内论坛的诸多结论，也算是有了一点点关于 OmniFocus 究竟适合怎样人的感受。 想当然，大家必定都听过 GTD，也知道 OmniFocus 非常适合 GTD，不过，你懂什么是 GTD 嘛？你了解为什么 OmniFocus 适合 GTD 嘛？ 如果你奢望我用短短的文字就让你明白能够提高每个人都担忧的效率问题的 GTD 究竟是什么，请出门右转，永远别买 Omni 家任何软件~ 如果你奢望花一小会儿功夫随意百度一下就可以明白 GTD 究竟好在哪里究竟如何使用，也请出门右转，等你有耐心了再回来~ 先抛两张 GTD 的大图，记得应该是以前从知乎上扒下来的。（先看注解 后看图！） 这张图首先分类了 什么任务是不要记录在 OmniFocus 中以及需要记录在 OmniFocus 中，麻烦保存此图，在你决心购买 OmniFocus 并且买入后，跟随着一起尝试理解，按照自己的需求来划定不同区分。（配合 OmniFocus 各种基础教程效果更佳~） 此图就是 GTD 的一个很大的解释了，至少你应该庆幸这不都是文字，还有一层层的关系和不同的颜色（稍后会有文字部分嘿嘿🌚0 0）。乍一看一定非常迷茫 觉得似乎也没什么厉害的！ 当然了。。。要是厉害的这么容易发现，你早就会高效率的运用 OmniFocus 了！ 记住，唯有自律且花费时间在 GTD 上，GTD 才会给予你回报，正如爸爸妈妈经常说了：“努力就一定会有回报” 在这里完美体现！（发现没有回报？请重新梳理 GTD，观摩大神笔记，观摩大神经验） 要知道，GTD 不是一个你分分钟就可以学精的东西，也许你看过 GTD，也尝试过，发现仍然失败了，请看下面： 首先分享一本书：下载地址，以下几个大点翻译自英文文章 Here I sit, many months later, working hard to fully integrate GTD into my daily life. I’ll admit, it isn’t easy and can take a good deal of investment. 在我坐在这里许多个月，努力的将 GTD 融入我的日常生活后，我承认，这一点不简单，而且需要很大的投资。 GTD 需要你付出努力 读完上面那本分享的书后，你并不能神奇般的解开你部分的脑容量，能够轻易的就记起来在母亲节给母亲打一个电话。你需要付出努力去维护好你的系统以及更多的系统，越来越多的不同项目需要更大的努力维护才能运转。 GTD 本身就需要花费时间 就像上面一样，需要你努力，你自然就会耗费时间，在工具的选择中，有许多的工具也会更加耗费时间，你用不好，则耗费多几倍的时间也无法维持好你的项目。 GTD 需要你自律 由于 GTD 的一项项分列，你会发现你处理任务十分快。但是，事出有因，如果你没有坚持维持你的系统，那么你的系统就会出问题，卡壳，完全坏掉。在一开始我遇到了许多问题，我向你保证花点时间去好好维持你的系统和加入每周最重要的任务一样重要。因此你要非常自律能够保持稳定的维持和修改系统。 你投资给 GTD 多少，你就会获益多少 越执着，收货越多。 看了这么多云里雾里，需要坚持，需要时间和努力，还需要你自律的文字，是不是快放弃了？ 是不是想着，我都这么能坚持，能努力，能自律了为什么还要用你？好好学习不就行了！ 别慌！重点在这里。要知道，所有人都说学习需要循序渐进，工作不可贪图快捷。 如果你真的可以做到学习永远都自律，努力，用功，嗯… 你也许不需要用 GTD！ 但是，有多少人能做到？ 也许，GTD 一开始也会耗费你的时间，会让你觉得麻烦觉得无趣，但是当 GTD入门后，他就会变成工具，变成汽油，让你加速前进，而 OmniFocus，也正是这其中必不可少的一部分，对 GTD 执行非常重要的 GTD 工具。 为什么这么说？ 从上面你可以看到很大一部分的努力都在于维持上，从一开始的记录在本子上，到 web 端的工具，到破破烂烂的 APP，发展到如今各种 GTD 任务应用，OmniFocus 更是独树一帜。 当别人还要花费成小时的时间来维持整个 GTD 系统运转时，你却只需要轻轻的打开手机编辑，抬起手腕从手表中 检查项目，在 Mac, iPad, iPhone, AppleWatch 中无缝同步，自然比起曾经的手写，web 上减少了许多功夫。 OmniFocus 2 中独特的一些点：（请不要嫌多） 推迟功能，通过推迟功能的设定，可以解决一天事件太多，当天却发现不需要执行的可以变为待办，并且通过前期的推迟功能，可以有效的发现自己对于任务和项目的掌控力，对于时间的预判，前期耐心的记录，后期可以免去许多的预判失误。 透视功能，需要 Pro 版解锁，拥有 Pro 的 OmniFocus 才是真正的 GTD 神器，可以自定义透视的分类，针对不同的需求来定制，可以将多个项目放到一起方便协同，可以根据截止日期排序，再根据是否有标记排序，制定不同的属于你的一览界面。有效的规避一个个点击项目进行更改（因为 OmniFocus 的多层级也是特点）。 无限的层级，可以无限的文件夹内文件夹，文件夹可以来回移动，项目可以来回移动，任务与项目可以互相转换，长按返回直接到主界面。透视中也可以快速进入到项目，便捷的编辑。 软件快捷键，iPad 版已经支持了外接键盘的快捷键，Mac 版本许多的快捷键可以让你提高三倍效率。（前提是用用用！用的非常的习惯！） Mail Drop 功能，真正做到邮箱的 Zero Inbox。任何邮件里面需要稍后处理的内容，转发给自己的 Mail Drop 邮箱地址，就会出现在 OmniFocus 的 Inbox 里面，这是一个很方便的功能，尤其是你工作的电脑是 PC 的时候。 强大的视图和搜索，搜索支持间断搜索，可以在不同层级下搜索，可以配合搜索已经完成和丢弃的内容，可以自定义视图，选择是否查看 已完成的，丢弃的，未阻止的，暂停的项目等。 绝对快速的收件箱和 Siri 记录，不管什么界面，什么透视，什么项目和文件夹里面，右下角都会有 添加到收件箱 按钮，看到哪个项目时的突发奇想都可以立即记录到收件箱 稍后再做整理，更可以打开 Siri 收录功能，按照介绍说出指定的两个字加上你想要办的事情，即可快速添加到 OmniFocus 中。 多方面的分享和文件支持，可以直接抓取各种链接，支持备注，图片和录音的直接附带，并且在列表中显示出来是否有附件。 中国地区 WebDAV 的支持，对于中国地区 OmniFocus 自家同步的缓慢，支持第三方 WebDAV 的支持，并不难，很容易上手。 整个 UI 和交互，快速的搜索，添加，手势上滑添加，长按返回主界面，显示包含的内容数目，显示是否有附件，黑白色主题自动切换。 Review 检查，默认一周检查，Mac 版上可以直接调动，手机版目前还不可以，但是第一次第一周后，可以在 Review 中调节项目，无关紧要的项目调成长时间才检查，紧急的项目任务一天一次或者一周一次，可以有效预防 截止日期快到了，你却忘记了这个项目，来不及细分和完成。 详细的 Context，简而言之就是标签，根据不同的需求，建议是轻度使用，可以有效的分类 花费的脑力和时间，例如设定 “@!!!” 为最费时费力，”@!” 为最轻松，这样可以在列表中直观的看到每个任务的时间耗费。 丰富的网上资源，没事问百度，有事找 Google，在这个 VPN 已然不稀罕的时代，没事 Google 一下大神们的 似乎分的有点杂乱，那是因为没办法完整的分类，看似这一个个的内容似乎都平平淡淡，然而能把这所有的东西都完美的整合，无缝的串联的，当 Omnifocus 无愧！ 正所谓，最简单的事，也许最难做。OmniFocus 就是将每个最简单的小事做到了极致，不多一份，不少一毫。 最重要的是，通过这个工具，真正解决了 GTD 上许多的麻烦问题，系统的维护成本和时间的规划在 GTD 中已经降到了最低。（前提你一定要用好，别加一堆买菜清单说这软件浪费钱！） 例如，通过对 Moke 的微博抓取， 推迟功能 和 透视功能，可以创建对刷微博时所看到有兴趣的微博的一个 Read Leater 透视，这三者缺一不少，由于 推迟功能的原因，可以每周一看并且是灰色不会影响，透视可以直接的进入整个列表，对于 Moke 的支持，可以让任务带有 图片，链接，应有尽有，一切应该有的内容都跃然屏幕。 再例如，Mac 效率软件 Manico，微博第三方软件 奇点，效率软件 番茄时钟 的作者 @图拉鼎 就是用 Omnifocus 完成了他 三款软件的开发和 Swift 语言转换。 At Last。最后的都是最重要的~ 如果你看过了 GTD 的内容，看过了用 GTD 和 OmniFocus 人所写的文章，依旧不为而动，那只能说我失败啦！你就不要买啦~ 如果你对 GTD 有一点理解了，但是觉得似乎我说的有些困难了，但想尝试 GTD，我不介意你去用其他软件来尝试，但是估计尝试过你都会放弃 GTD，但 OmniFocus 的确是一款对于 GTD 有着深入研究和开发的效率软件，在众多大神的开导下，更是有无数的文章来教你，我不信你不会！ 不过切记！万万不可被大神的设计和想法所局限， GTD 一定要适合自己生活规则的才最有效！ 如果你已经对 OmniFocus 非常动心，看完这篇文章后又决定用 GTD 来让自己更加效率起来，欢迎直接购买吧！就算你没有毅力，400 加上 Mac 版的 80 刀，快 1000元的价格也会让你坚持下去的。 俗话说，一切能够使你效率真正提升起来的消费都是值得的。 推荐一篇 “谈谈我怎样使用 OmniFocus 度过一天” finally，我不为任何看了文章买了 OF 觉得不好用的人 负责哟~]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>ios</tag>
        <tag>app</tag>
        <tag>review</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Podcast」播客推荐、信息介绍及单期节目推荐（21个） --17.5.27]]></title>
    <url>%2F2017%2F03%2F10%2Fpodcasts%2F</url>
    <content type="text"><![CDATA[转至：持续文章更新列表，建议收藏 序日常走路听播客，早起睡前听播客已经成为了习惯~ 来推荐一些自己听得播客以及单期节目吧！ 什么方面都有，主要偏向科技，有英文有中文哈！ 本文章将介绍绝大部分个人听的播客，目前使用的软件为「Pocket Casts」，态度非中立，拥有很强的个人观点，是个学生，学 cs，爱好繁多~ 生活者：生活着，无限可能 通过对每一档播客节目的简单介绍、相关信息罗列、以及单期节目推荐，让你可以通过播客的社交网络信息，播主的个人社交网络来直观看到这档播客的风格，而单期的节目推荐虽然带有很强的个人观点，但依旧可以成为你衡量是否喜欢的方便之选。 因为个人使用 Pocket Casts 作为播客应用，故所有链接都是 pca.st 为开头，但是在打开后依旧可以使用 iOS 自带以及 RSS 等方式订阅，所有播客节目均可在泛用型播客软件中搜索出来。 更新历史 想要忽略更新历史，直接跳转：播客列表目录 2017年5月27日： 播客增加：Canvas 单期节目增加：AppStories #6，迟早更新 #53，壁下观 #64 5月23日： 单期节目增加：科技相对论 #17/5/20、#17/5/15，疯投圈 #8，Acquired #Episode 34，黑水公园 #17/4/6、#17/4/20 5月10日： 播客增加：科技相对论，AppStories 单期节目增加：壁下观 #60，不能错过的翻唱歌曲 #17/4/26，疯投圈 #7，Acquired #32 3月13日： 播客增加：IT 公论，大可瞎聊，迟早更新，Cortex 单期节目增加 3月10日： 文章建立 播客增加：比特新声，壁下观，一天世界，Checked，疯投圈，Tearhour.fm，选·美，UX Coffee，Untitled TechTalk，黑水公园，不能错过的翻唱歌曲，代码时间，B-Sides，Acquired 播客列表 点击播客名称跳转本文章对应的介绍链接~ 或者直接在目录中点击直达！ 比特新声 壁下观 一天世界 Checked 疯投圈 Teahour.fm 选·美 UX Coffee 设计咖 Untitled TechTalk IT 公论 大可瞎聊 迟早更新 科技相对论 娱乐： 黑水公园 不能错过的翻唱歌曲 开发： 代码时间 英文： B-sides Acquired Cortex AppStories Canvas 比特新声返回 播客列表目录 比特新声由斑斓工作室出品，英文名称 bitvoice。节目主持人为 郝海龙 及 有才。 内容偏向科技行业，但拥有各式各样的见解，两个主持人拥有不同的风格与见地，总是能无战争的擦出独特的观念。在不加特殊科技用语的亲近下，他们做出了别出心裁的方式，通过这档节目可以了解不仅限于科技行业，但更是加入了生活观、价值观、爱情观的三观碰撞。 播客地址：Pocket Casts 信息比特新声：微博斑斓播客：微博郝海龙：微博有才：微博 单期由于个人是在大约 2016 年后期才听，故推荐的单期节目多为后期节目。 133：我很小的时候就穿女装了 125：两个编程少年的隔空对话 壁下观返回 播客列表目录 壁下观（Art in situ）是 IPN 旗下一档在实地考察和亲眼目睹的前提下讨论中国古典美术史相关话题——绘画、雕塑、建筑等，并随时溢出至别国境内和其他论域。拥有会员计划。 这档节目通过对世界各地的文化观看，交流，以及专业性的分析和解释，让你通俗易懂的了解中国古典美术史，不论是古建筑，绘画，雕塑，都可以在最大的程度上让你了解它的另一面，不同于枯燥无聊的文字，通过对话，以及各方面的分析，让你理解整个文化以及背后的意义。 播客地址：Pocket Casts 信息壁下观：官网，微博，知乎专栏，Twitter古村：建筑师，微博瞿侠：艺术史博士生，微博页边：朝阳群众，知乎超人：摄影师竹子：朝阳群众，知乎 单期 64：锈带遗珍——克里夫兰艺术博物馆 60：水乡古镇还有什么可看的 54：南京的城墙和城门 53：巴黎「亚文化」—-吉美博物馆 34：与古为徒 —- 波士顿美术馆的中国收藏（上） 33：皇帝的花园秘境 26：谜之布达拉宫 一天世界返回 播客列表目录 一天世界，昆乱不挡。不鳥萬如一主理。IPN 出品。 在不鸟万如一结束了「IT 公论」播客之后，开启了一天世界的旅程，这次的播客将局限的 IT 抛弃，而是用一个人的态度去带你看世界，这个世界上没有完整完美的观念，但是不鸟万如一主播却是一个拥有特立独行风格的人物，不论是鲜明的观点，还是进取的观念，又或者是不同于你的理解，都可以对你理解这个世界出上一分力气。 播客地址：Pocket Casts 信息一天世界：官网，微博，博客不鸟万如一：知乎，Twitter不鸟万书评：列表 单期 39：我对盗版的态度 28：TouchBar，为什么？ 27：把可乐倒在二零二三年的 MacBook Pro 上 25：国际巨星：刘（Philippe）德华（Starck） 12：WWDC 印象（或曰后现代化的苹果） Checked返回 播客列表目录 Checked 是一档由 JailbreakHum、文刀漢三和清越千千共同主持的科技类播客节目，我们在这里聊效率，聊 App，聊系统，聊生态，也聊苹果产品。我们试图让你通过你手中的智能设备，能够把复杂的事变简单，把简单的事变快速。找到适合为你所用的方法，打造专属于你的独一无二。拨开琐碎，对自己的需求一目了然；摆脱纷繁，对自己的生活举重若轻。 鲜明的三个人的不同特色与理解，造成了完美的听觉体验与理解概念， 播客地址：Pocket Casts 信息Checked：官网，微博，TwitterJailbreakHum：微博，Twitter文刀漢三：微博，Twitter清越千千：微博，Twitter 单期 28：如何选择适合自己的应用 20：米斯特苹果访谈 —- Mac 初上手 12：Pin 开发者 —- 钟颖访谈 2：如何记一手明白账 疯投圈返回 播客列表目录 《疯投圈》是一档为创业者、投资人、分析师，以及任何对创业、投资有兴趣的人准备的播客节目。每期节目我们为你深度解剖创投行业新动向。 IPN 联合创始人 Rio 主持的一档关于创业投资的播客，目前还比较小但是却有不少内容，可以更快速的涉及这方面的内容，播客由峰瑞资本、昂若资本支持，会邀请资本人过来讨论话题，不论是资历还是经验上来讲，有一定的见地，对于扩展这方面的视野和知识也十分有用。 播客地址：Pocket Casts 信息疯投圈：官网，微博Rio：微博，Twitter 单期 #8：专访小密圈吴鲁加 #7：两个穿着严选拖鞋的人聊严选 #6：2016回顾与展望 Tearhour.fm返回 播客列表目录 Teahour.fm 专注程序员感兴趣的话题，包括 Web 设计和开发，移动应用设计和开发，创业以及一切 Geek 的话题。 作为一档程序员相关的播客，通过请不同的嘉宾，各类开发工具、设计相关领域的精英采访，让你直观的理解程序员的那些事，更给无法接触这些人的人们一个深入的体验和了解。 播客地址：Pocket Casts 信息Tearhour：官网，微博Terry Tai：Tearhour 创始人，微博玎玎：GrowingIO 联合创始人，微博Daniel：Ruby 程序员，ruby-china.org 创始人，微博，TwitterKevin：微博滚滚：知乎 单期 88：与墨刀创始人张元一聊创业从0到1 86：和『掘金』创始人阳明聊聊创业和技术 80：码农周刊和开发者头条：技术人的干货分享平台 选·美返回 播客列表目录 《选·美》（I am Election）是由 IPN 出品的政论类播客，由 talich、游天龙、庄巧祎、林垚主持。我们相信看大选是认识美国的最好方式。2015 年 8 月 15 日首播。 民主国家的政治究竟是个什么模样？通过对美国大选的了解和通俗解释，让你明白美国政治体系，民主体系，社会关系等等，一切都从大选开始~ 播客地址：Pocket Casts 信息选·美：官网，Twitter，微博talich：微博林垚：微博游天龙庄巧祎：记者 单期 48：Trump 秀（友情出演：Hillary） 37：在美国国会实习是怎样的体验？ UX Coffee返回 播客列表目录 「UX Coffee 设计咖」是一档为产品设计师和关注用户体验的同学准备的播客节目。三位主播都在硅谷生活和工作，每期节目我们会邀请业界大咖聊聊和用户体验设计相关的事。微信公众号: uxcoffee 硅谷生活和工作的经历让这档节目一下子有了档次哈！看看美国的设计生活究竟是哈呢么样子的呢？传说中的设计师的天堂是什么感觉呢？再加上各种业界知名公司员工等的邀请，如果你想走设计这条路，必须得看看~ 播客地址：Pocket Casts 信息UX Coffee：官网，微博Mengdi Zhang：VMware UX设计师，Twitter，博客Hoka：Google 交互设计，Twitter，知乎，博客Riceman：Google 用户体验设计师，Twitter，知乎 单期 19：当扎克伯格是你的「产品经理」……(何如佳 · Facebook 设计师) 16：你现在所有的经历，都会在未来穿连起来（郦橙 · AOL 产品经理） 13：初创公司设计师的苦与甜（Apropose 前设计总监、现 Facebook 设计师张宁夏） 10：从企业级产品到Android TV，从上海到硅谷（王斯捷 · Google交互设计师） Untitled TechTalk返回 播客列表目录 人类的好朋友 Megabits &amp; Mutnau 主持的（大多数时候是）科技主题闲聊播客。承认主观是我们的态度，很不正经是我们的特色。 有 iOS 开发者 Megabits 和 Mutnau 合作主持的 UTT 节目，属于闲聊科技圈，他们可以从发布会聊到人工智能，可以没事聊聊饥荒的人生意义，聊聊大学操蛋的事情，然后在回国头来说聊物理，正如播客名称一样，他们这叫无名称的科技对话。 播客地址：Pocket Casts 信息Untitled TechTalk：微博Megabits：微博，PomoNow 开发者Mutnau：微博 单期 31：缺少精品的一年 13：这期我们聊订阅制 IT 公论返回 播客列表目录 《IT 公论》由 IPN 出品、不鸟万如一和 Rio 主持，首播于二零一三年十一月。本节目系一种综合性之科技节目。收听对象，并不限于社会上某一阶层。凡职业部门不同，知识水准互异，而对于科技有共同兴趣者，从任何角度，收听此秀，不致味同嚼蜡，毫无所得。一切题材，即就雅俗两极之范围内，伸缩去取，尽量适用多方面之需要，以求俗不伤雅，雅不背时。 科技播客，非奇技淫巧之表现也，亦非粉黑二元论争也。盖科技与吾人之关系至密至切，而欲其适合各人之需要，不悖于美之真义，则软件式款，与夫工作生活之配合，用例之转换，必有相当研究方克能之。而欲吾人乐愿研究之，则对于科技之兴趣，必先有以引起之，此《IT 公论》之滥觞也。 二零一六年四月停播。 由 IPN 招牌不鸟万如一和 Rio 主持的节目，虽然在 16 年已经停播，但是里面的内容确实十分值得一听~ 播客地址：Pocket Casts 信息IT 公论：官网不鸟万如一：知乎，Twitter不鸟万书评：列表Rio：微博，Twitter 单期 191：「你说 Tim Cook 未来会不会竞选美国总统？」 187：「真想不到我为微信说了那么多好话」 184：「苹果的硬件必须等 2.0，软件必须等 3.0」 171：「安全和隐私是极少数人的特权。」 142：Jonathan Ive 时代的苹果 大可瞎聊返回 播客列表目录 大可瞎聊是一档关于科技、互联网和无所不在的知识趣味播客节目。在其中，我们对早期创业项目、天使投资和孵化器进行一本正经的胡说八道。但除此之外，我们也会聊点别的。 从荔枝出来的一档节目，号称没有名气，由一个裸辞的家伙创办，如果有兴趣知道更多信息，不如看看他的知乎吧哈！这档节目通过瞎聊这个不严肃的字眼来聊一聊那些严肃的话题，会请一些非常有实力的人过来客串~ 播客地址：Pocket Casts 信息大可瞎聊：微博邵佳琪：微博，知乎，《Podcasting Pro Basics》译者之一 单期 14：从 AirPods 谈到人工智能后，再看值不值得买？ 8：对话顶级投资人系列 十维资本创始人 张军 7：对话顶级投资人系列 戈壁资本合伙人 徐晨 1：那些在 YC 2016 Winter Batch 上好玩的项目 迟早更新返回 播客列表目录 「迟早更新」是一档以科技创新、生活方式和未来商业为主要话题的播客节目，也是风险基金 ONES Ventures 内部关于热情、趣味和好奇心的音频记录。我们希望通过这档播客，能让熟悉的事物变得新鲜，让新鲜的事物变得熟悉。 这档由风险基金所组成的播客，并没有所谓的广告，没期的话题都十分的清爽，从天到地，啥都可以有，如果你想要了解各种不同的科技创新、生活、商业等，可以考虑听听哟~ 播客地址：Pocket Casts 信息迟早更新：官网，微博，知乎专栏任宁：微博枪枪 单期 53：看 TED 视频能改变人生么？ 30：红红火火恍恍惚惚 19：这一夜，我们说说 UX 7：《硅谷》是如何重现「硅谷」的？ 科技相对论返回 播客列表目录 不管现在有很多人说 ZEALER 如何，王自如如何，我依然觉得他的这档脱口秀节目十分不错，通过一些通俗易懂的解释，给所有人普及一些基础的知识，而由于本身对科技的了解以及深入的调查，各种理解也十分的好玩和有趣。 播客地址：Pocket Casts 信息王自如：微博ZEALER中国：微博 单期 17/5/20：【第三季No.8】铁路传奇—-中国高铁是怎样练成的 17/5/15：【科技相对论】未来能源之「核电风云」 17/5/6：【第三季No.6】埃隆·马斯克的太空商业创奇 17/4/27：【第三季No.5】疫苗，你到底该不该打？ 17/4/21：【第三季No.4】「现实版神盾局」DRAPA的创新密码 17/4/13：【第三季No.3】机器学习完全解读 16/10/11：【第二季最终篇】手机背后的三星帝国 黑水公园返回 播客列表目录 黑水公园是一档主打娱乐的电影，用随意而不失态度的对话，讲述关于电影的那些事儿，如果你强求严谨不行的电影报道与评论，那还是左转回家把~ 播客地址：Pocket Casts 信息金花：微博Alvin：微博贾涛：微博（贾维斯） 单期 17/4/20：24个《大群》 17/4/6：《招魂》与驱魔人沃伦夫妇 17/2/23：舞起来！奥斯卡提名《爱乐之城》、《时间代码》 16/12/19：《黑客帝国》重温九十年代末的科幻经典 16/12/12：《西部世界》那些无序的混乱，我选择看到美好 16/7/25：金融海啸中《大而不倒》的华尔街 16/7/21：一黑到底的《硅谷》 不能错过的翻唱歌曲返回 播客列表目录 有些歌你是否已听得厌倦？来听听翻唱达人们为您带来不一样味道的翻唱歌曲！ 发现翻唱的那些乐趣把~ 有一些的确不咋样或者差异化很大，但是还是有一些很不错的！从励志 fm 起家，由 Dkey 收录 播客地址：Pocket Casts 单期 单纯个人喜好 0 0 17/4/26：【听友投稿】喜剧之王 17/1/20：浪费 17/1/13：她说（女生版） 16/11/2：霍元甲 16/10/29：不将就 16/10/12：宝贝 16/8/20：当 16/7/19：大鱼（大鱼海棠电影印象曲） 代码时间返回 播客列表目录 代码时间是一个面向程序员的中文播客节目，目前主播常变化就不放个人的信息了，这个播客偏向技术性，被我用来了解各式各样的不同技术，包括各种小型的语言，一些技术出版、技术管理等问题~ 播客地址：Pocket Casts 信息代码时间：微博 单期 17/2/11：从技术到管理 - 陈皓 B-Sides返回 播客列表目录 Relay FM is an independent podcast network for people who are creative, curious and maybe even a little obsessive — just like its hosts. 作为 Relay.fm 旗下的一档节目，其水准和水平十分的强悍。B-sides：A mix of behind-the-scenes content and audio from before and after the shows. 这档节目的主持由 Relay 旗下所有主播抉择而出，每期都有不同的话题。 播客地址：Pocket Casts 信息B-Sides：官网，Twitter主播：Relay.fm Hosts 单期 27：Top Two: Computing Platforms Acquired返回 播客列表目录 A Podcast About Technology Acquisitions and IPOs. EXPLORING TECHNOLOGY, STARTUPS &amp; VC,ONE EXIT AT A TIME 一档讲科技圈中收购，并购，上市等的播客节目，Ben 是 Pioneer Square Labs 的联合创始人，David 是 Madrona Venture Group 的董事。两个人在这方面本身就有不小的见识和经验，在加上没一期非常强悍的调研和调查，帮你分析这些公司成功被收购，IPO 的各项原因等。 播客地址：Pocket Casts 信息Acquired：官网Ben：Twitter，LinkedIn，博客David：：Twitter，LinkedIn，博客有 Slack 群，可以在官网中申请。 单期 Episode 34: Starbucks IPO with Dan Levitan Episode 32: The Snap Inc. IPO Episode 17: Waze Episode 14: LinkedIn Cortex返回 播客列表目录 CGP Grey and Myke Hurley are both independent content creators. Each episode, they discuss the methods and tools they employ to be productive and creative. Hosted by CGP Grey and Myke Hurley. 由 RelayFM 的联合创始人 Myke Hurley 和 CPG Gery 联合主持的节目，主要讲他们连个独立制作人在平时所用到的一些工具，相关的用法，观念的碰撞，工具的使用的各种方法以及生活方式等。 播客地址：Pocket Casts 信息Cortex：官网，TwitterCGP Grey：TwitterMyke Hurley：Twitter 单期 46：External Thinking Tool AppStories返回 播客列表目录 AppStories is a MacStories production co-hosted by MacStories Editor-in-Chief, Federico Viticci, and MacStories writer, John Voorhees. AppStories is a weekly podcast published on Mondays. Each week, Federico and John discuss their favorite new apps and noteworthy updates, dive into the stories and people behind the apps they love, and explore the social and cultural impact of the App Store. AppStories 是由 MacStories 的创始人及作者 Federico 以及作者 John 联合创立，保持每周一期更新，时间小于 30 分钟，他们希望能在时间很少的情况下，了解到更多关于 APP 背后的故事，因此会邀请各种类型的人来一起畅聊，没一期都一定会有一些 APP 推荐和介绍，更可以听到一些他们使用 APP 的情景等。 播客地址：Pocket Casts 信息AppStories：官网Federico Viticci：Twitter，MacStories介绍John Voorhees：Twitter，MacStories介绍MacStories：官网 单期 6 - Interview: The Making of the CARROT Apps with Brian Mueller 2 - Setting Up a New iOS Device Canvas返回 播客列表目录 Hosted by Federico Viticci and Fraser Speirs, Canvas is a podcast all about mobile productivity. Armed with iOS, Federico and Fraser will be walking through workflows, exploring the best apps for the iPad and iPhone and helping users solve problems. 有一档 RelayFM 旗下的节目，由著名的 Federico Viticci，同时也是上面一个 AppStories 的主播和 Fraser Speirs 联合主播，主要讨论的是移动办公、移动设备的效率使用，多为 iPad 相关，Federico 作为 MacStories 的作者，本身就一直使用 iPad 进行办公以及写文章等，推荐选择自己感兴趣的话题进行收听~ 播客地址：Pocket Casts 信息Canvas：官网，TwitterFederico Viticci：Twitter，MacStories介绍Fraser Speirs：Twitter，博客 单期 31: Note Taking with Apple Pencil 17: 2Do with Ben Brooks]]></content>
      <categories>
        <category>Podcast</category>
      </categories>
      <tags>
        <tag>podcast</tag>
        <tag>life</tag>
        <tag>tech</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift 3 - 用 SnapKit 添加 SafariViewController 为 childViewController]]></title>
    <url>%2F2017%2F03%2F08%2Fswift-learning%2Faddchildview-safari%2F</url>
    <content type="text"><![CDATA[介绍本文章尝试添加 SafariViewController 作为子 viewcontroller。我是通过 SnapKit 来对所有的对象进行 layout 以及 Swift 3 来编译。 同时，我也在最后介绍了一些 SnapKit 的高级用法，divide 和 multiply，这些在官方的档案中并没有过多的提及。 下载完整的项目。 English Version: Add SafariViewController as childViewController with SnapKit 开发者：开发这个世界. SnapKitSnapKit 是一款让 iOS 和 OS X 自动布局变得方便的 DSL。 为什么要用？当我在开发 Info It 时，在 Xcode 中给对象添加限制时，Xcode 每一次都会给我崩溃并且无法显示想要的任何界面。在尝试许久并资讯了他人后，不得不觉得是 Xcode 本身的问题。在安装了 SnapKit 以及使用后，发觉通过 Snapkit 来进行编程化的自动布局会自动的解决这个方法，而 SnapKit 所带来的简单方便的理解，更加让布局变得方便许多。 安装SnapKit 官方文档 通过 CocoaPods，每个人都可以十分快的安装。我不会在本文章中相机说明安装 CocoaPods 的细节和方法，我会假定你已经安装了 CocoaPods 并且直接开始安装 SnapKKits。 选择 Swift 语言创建一个新的项目，不关闭 Xcode 的情况下打开终端（我这里用的是 iTerm），接下来 ‘cd’ 到你项目所在的文件夹并且创建一个新的 podfile。 &gt; pod init 在完成这条指令之后，打开你的 podfile，并且讲下面一行指令加入进去，和我图中所加入的位置一致。 pod &#39;SnapKit&#39;, &#39;~&gt; 3.0&#39; 接下类在终端中输入安装 pod 的指令： &gt; pod install 在安装 SnapKit 期间，不要关闭你所创建的项目！在如图中成功安装后，关闭项目并且打开 .xcworkspace 结尾的文件。 SafariViewController接下来我会用 “svc” 来代替 SafariViewController 当你想用 svc 时，你需要在 class 的开头继承 SafariViewControllerDelegate，然后添加两个 String 作为之后当做链接打开所使用： 12345class ViewController: UIViewController, SFSafariViewControllerDelegate &#123; // Insert two web link to test the child view let main: String = "http://o1xhack.com/2017/02/21/infoit/" let update: String = "http://o1xhack.com" 在 storyboard 中创建一个按钮以及一个界面（button，view）。 并且将 view 和 button 连接到你的 controller 文件中。 addChildViewController在 viewDidLoad 中添加如下的代码来实现自动布局和添加子视图： 1234567891011121314151617override func viewDidLoad() &#123; super.viewDidLoad() showView.snp.makeConstraints&#123; (make) -&gt; Void in make.edges.equalTo(self.view).inset(UIEdgeInsetsMake(0,0,60,0)) &#125; let svc = SFSafariViewController(url: URL(string: main)!) svc.delegate = self self.addChildViewController(svc) self.showView.addSubview(svc.view) svc.didMove(toParentViewController: self) svc.view.snp.makeConstraints&#123; (make) -&gt; Void in make.edges.equalTo(self.showView) &#125;&#125; 第 4-6 行:给 showView 进行布局限定（这个视图将会是 svc 的父视图），这里的代码运用 SnapKit 将 showView 限制于 view（主视图），上左右分别和 view 没有任何举例，下方空出 60 的距离留给 button。 第 8-12 行:第 8 行添加了 SafariViewController 给 svc，用到了我之前添加的链接。第 9 行设定了 svc 的 delegate。第 10 行将 svc 添加为子视图，然后在第 11 行将 svc 视图添加为 showView 的 subview。第 12 行告诉 controller 我们的 svc 已经成功的添加到了父级视图中，也就是我们的 showView。 第 14-16 行:这里基本和前面的 4-6 行一致，我们给 svc 设定了布局限制，让它正正好好填满了整个 showView，相对的来讲也就是和 showView 一样的（0,0,60,0），但因为 svc 是一个子视图，所以我们要限制子视图相对于父级视图的布局。 结果在添加了这些代码之后，运行整个项目然后我们会看到如图中的模拟器视图，并且发现我们的 button 和 svc 互相遮挡，这是因为我们还没有给 button 进行任何的布局。、 再遇 SnapKit现在，我们知道 svc 距离底部是 60，因此我们可以相应依据 showView 来给 button 进行限制。 1234change.snp.makeConstraints &#123; (make) -&gt; Void in make.centerX.equalTo(showView) make.top.equalTo(showView.snp.bottom).offset(20) &#125; 关于 change.snp.makeConstraints 的代码，我们需要把它紧接着 showView.snp.makeConstraints 添加，因为这两个的限制是有关联的。 第 2 行，我们对 button 的中心进行了限定，让它的横轴中心和 showView 一致，如果你曾经用过 Xcode 的限制，那么你一定会熟悉这行代码的意思。第 3 行，我们设定 button 的顶部和 showView 的底部距离为 20。因为我们知道 showView 一定距离 view 的底部是 60， 因此 20 这个距离是一定因为分辨率问题被影响。（在之后我会用 divide 的方法来设定布局，一个更加精美的方法。） 运行项目，然后你会发现 button 正好在 svc 的下面并且在整个手机的中心。 更新 SVC现在我们需要写一个新的 function 用作点按 button 后更新 svc 链接。这一点都不难，只需要将 button拖拽到 viewcontroller 中并且选择创建一个动作即可。 我们尝试添加和 viewDidLoad 中一样的添加 svc 的代码并且运行程序，然后我们发现在点击 button 后，svc 并没有任何变化。 这是我们添加的代码：那为什么会这样呢？（记住你不能直接复制我的代码，因为这需要连接 button 才可以） 12345678@IBAction func changeWebsite(_ sender: UIButton) &#123; let svc = SFSafariViewController(url: URL(string: update)!) svc.delegate = self self.addChildViewController(svc) self.showView.addSubview(svc.view) svc.didMove(toParentViewController: self)&#125; 点击 button 不更新是因为我们没有新新建的 svc 进行任何的布局限制，因此 viewcontroller 根本不知道这个新建的 svc 应该显示到哪里，因此，我们需要用 viewDidLoad 中一样的 svc.snp.makeConstraints 来对 svc 进行限制。 123456789101112@IBAction func changeWebsite(_ sender: UIButton) &#123; let svc = SFSafariViewController(url: URL(string: update)!) svc.delegate = self self.addChildViewController(svc) self.showView.addSubview(svc.view) svc.didMove(toParentViewController: self) svc.view.snp.makeConstraints&#123; (make) -&gt; Void in make.edges.equalTo(self.showView) &#125;&#125; 添加完成后，运行程序并且点击按钮，我们发现的确可以更改 svc 的连接了：（第一个是文章内容，第二个是目录） SnapKit Divide / Multiply到这里，这个项目其实已经完成了，我们成功用 SnapKit 来限制了每个对象，并且将 svc 嵌入到 view 中，和 button 可以同时存在，并且可以更新链接。但是用具体的数字来限制布局的距离其实并不那么好，会有一丢丢的缺点，而这里我们就要通过 SnapKit 所拥有的分割和倍数来决定每个对象所占用的具体比例而达到完美的决绝，而我们之前用具体数字所形成的布局在白色空白处其实是不相等的，因为我们没有考虑 button 自身的高度。 Divideby 以及 Multiplyby 是 SnapKit 中的两个高级使用方法，在文档中也没有涉及过多，是通过对对象进行比例化的分割来完美达到布局效果。 首先我们考虑了一下发现我们仅仅需要很少的空间给 button，假设我们将整个 view 的高度分成了 10 份，svc 占用 9 份。但当我们在讲 view 除以 10 分取其 9 份的时候，我们不能用 divide，而应用 multiply 以及系数 0.9 因为使用 devide 来进行 9/10 的分割并没有简单的乘以系数方便。 123456showView.snp.makeConstraints&#123; (make) -&gt; Void in make.top.equalTo(self.view).offset(0) make.right.equalTo(self.view).offset(0) make.left.equalTo(self.view).offset(0) make.height.equalTo(self.view).multipliedBy(0.9) &#125; 我们讲 viewShow 的整体限制更改为单方向的限制。第 2-4 行让 showView 的顶部，左部以及右部和 view 没有任何距离。第 5 行将 viewShow 的高度设定为整个 view 的 90%，也就是我们上面分析的乘以 0.9。运行项目，你会发现这样做是完全对的： 接下来我们需要考虑 button 的分割和占比问题了。我们需要考虑到 button 本身的身高以及相对应的到 showView 底部的空白和到 view 底部的空白，这三个部分需要进行一样的分割和比例。我们需要将 view 剩余的部分（1-0.9=0.1）分成三部分。因此我们将乘以一个系数 0.1*0.3=0.03，让我们这个试试： 12345change.snp.makeConstraints &#123; (make) -&gt; Void in make.centerX.equalTo(showView) make.top.equalTo(showView.snp.bottom).multipliedBy(0.03) make.height.equalTo(self.view).multipliedBy(0.03)&#125; Woops! 我们得到的是非常奇怪的布局: 为什么会这样呢？因为我们思考的方式错了~ 实际上，我们是想要把剩下的 10% 分成三份，应该是 0.1/3=0.0333… 无限循环，所以我们就将 button 的高度设为 0.034，这样上面和下面的空白就都是 0.033。但是需要让计算机理解我们的限定我们不应该针对 showView 进行 offset 的距离限定，而是根据我么一直计算的 view 来限定，也就是 0.967 的整个 view 距离，并且要限定给底部的举例，将代码改成下面这样： 12345change.snp.makeConstraints &#123; (make) -&gt; Void in make.centerX.equalTo(showView) make.bottom.equalTo(self.view).multipliedBy(0.967) make.height.equalTo(self.view).multipliedBy(0.034)&#125; 哈！成功啦~ 为什么用？我们可以发现 divide 和 multiply 很容易让整个布局变得比较迷惑，尤其是当对象越来越多时，更加需要深思熟虑每一个比例的确定以及试验，然而一旦我们确定了这个比例，除非我们需要在添加一个新的对象，就算添加，也将会比用具体数字要方便美观容易确定的多。]]></content>
      <categories>
        <category>Swift Learning（Swift 语言学习）</category>
      </categories>
      <tags>
        <tag>language</tag>
        <tag>learning</tag>
        <tag>github</tag>
        <tag>swift3.0</tag>
        <tag>SafariViewController</tag>
        <tag>SnapKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[（2.0 另有版本）iOS APP：Info It - 通过分享快速搜索电影、图书]]></title>
    <url>%2F2017%2F02%2F21%2Finfoit%2F</url>
    <content type="text"><![CDATA[2.0 版本后：文章更新请去往 2.0 版本后的最新文章：Info It - 通过分享快速搜索电影，书籍信息 前言点击下载：Info It - 通过分享快速搜索电影，书籍信息 可以根据博客左侧的目录快速去往「特色功能」「使用场景」等！ 开发者：开发这个世界. 为什么要做 Info It从用豆瓣记录电影开始，每一次不论在微信中还是网页中微博中文章内有任何电影，都得一次次跳转到豆瓣软件去搜索（豆瓣启动3秒在加上至少2秒欢迎页面），又或者打开一个新的网页搜索，iOS 10 中多出了 Look Up 功能，可以直接使用网页搜索，但是依旧不快并且对于长期使用豆瓣等的人来说，不论是评分，评分人数，短评，长篇评论都是很需要查询的到的，因此就有个这个软件的诞生。 Info It 是一款通过选中文字，运用 iOS 的 Action Extension 实现快速搜索电影，图书等的软件。 举个栗子！👉🏻 视频来啦！ 打开即刻浏览文章，看到文章中有电影，于是用最快的方式打开了豆瓣APP（iOS10里的特性）然后浏览数据，浏览评论，看看这个看看那个，看完了返回即刻，便处于重新刷新的情况。（在这里我故意停留时间长了一点为了保证视频可以一次成功，但实际上经常会遇到这类问题，因为内存问题是不可能避免的，一个APP是无法在后台保持良好就连safari也经常需要重新刷新，更别说如果你这时候收到一个消息进去回复一下等等。） 最新的 iOS 10.3 beta 版本中更新了文件管理为 APFS，大大减少了软件回去会重开的几率，简直十分棒，但不停的跳转依旧是无法解决的！ 视频：Info It 会避免什么优酷视频 youtube Info It 简介Info It 通过运用 iOS 的 Action Extension，在任何可以选择文字的地方，选择分享按钮，实现快速在豆瓣搜索电影，图书，烂番茄、IMDb 搜素电影的软件。 使用 Safari 内置浏览，达到豆瓣登录状态的存储（直接标记已看未看等） 不需要跳转其他任何地方，保持在原有的页面上 对拥有英文原名的影片在后台进行 JSON 数据解析，达到直接在搜索 IMDb 和烂番茄时查询英文名称 只要支持文字复制的地方都可以使用 可以配合多个场景达到效率化的使用 Info It： 并不是豆瓣开发的 是因为个人需求开发 个人对于电影和读书使用豆瓣十分频繁 问答Q：界面丑丑的A：由于真的不是个设计师。。真的不认识设计师。。真的是个学生也没钱专门请设计师- - 我会在有时间的情况下尽可能保证软件的功能性而不是美观性。PS：我一定会努力设计好看的 UI 和好的 UX 的，你要相信我 0 0 Q：会不会放弃？A：在当下，效率类的小工具在以后被替代的可能性很大，但是在这之前，我会尽可能的保证基础功能的正常使用。 Q：更新的时间？A：实习太难找了。。。GRE 真的很麻烦！作为一个学生，我还能说什么呢唉！请谅解 T^T 特色功能方便仅仅需要两步： 任何地方，选中文字 选择分享（Share），如果没有请先选择更多来展开 无缝融合 标记电影，标记图书，查看标记状态 查看评论，查看影人资讯，查看打分，查看图片 所有在豆瓣、IMDb、烂番茄可以做到的，如今指尖可达，无需离开页面，触手可及！ 中英文无缝查询文章中的文字是「降临」？需要查询豆瓣记住英文名称在去 IMDb 查询？ 通过豆瓣 API，提取对应 JSON 数据并自动查询影片的原名 超快 打开 APP，输入，确认 一秒打开，一秒搜索 打开网页速度看你网络决定，中国豆瓣很快，美国略慢 满足少数派 不论多小众的需求，如果在力所能及的范围，我一定去实现 打开角标显示数字1，将会永久显示角标 “1”，将 Info It 放入文件夹后，通过 3D Touch 则可以快速按压文件夹打开带有角标的 APP，专为希望将 Info It 放如文件夹的 iPhone 6s+ 设备用户定制（随时可以关闭角标显示） 可以真正达到一秒打开，没有间隔 具体可以看 #使用场景-放在文件夹中代替豆瓣 使用场景放在文件夹中代替豆瓣（1.7.3） 这是 Info It 的第一个为少数人做的功能（我自己），并不知道有没有人在意，但觉得小小的好功能还是很增加幸福感的！（简称小确幸哈哈） 在 Info It 的 设置-高级设置 中打开「开启数字角标」 提示获取通知，选择允许（不会发任何东西，只需要角标而已） 关闭 Info It，可以看到角标显示 1 放如文件夹中并关闭文件夹 3D Touch 按压对应文件夹，可以看到 Info It，点击便可以打开 你可以随时在 设置-高级设置 中关闭显示，角标就不会存在了 这个功能可以代替豆瓣软件的原因有三：（以我个人例子，每个人使用情况不同~） 我将豆瓣也放在文件夹中，因此他们的层级一样 同样在文件夹中，Info It 开启这个功能后比豆瓣打开少一步（一个字：快） 相比于豆瓣的打开三秒等待，Info It 打开软件没有启动界面，没有广告，小巧，一秒（豆瓣？？你跟我讲豆瓣打开快我就真没话说了0 0） 同样的功能，豆瓣可以的 Info It 都可以做到（网页版豆瓣像查影人似乎不可以） 功能之外，你还可以参考 IMDb，烂番茄这两个国外著名影评网站 如果你使用豆瓣，复制中文名在到 IMDb 查询完全无效 你需要找到英文名，记住或者复制再查找 Info It 内置中英文名称自动转换（读取豆瓣数据），只要是国外影片都可以转换 功能之内，豆瓣读书和豆瓣电影可以同时查看，一键切换 豆瓣里面，你需要返回才能再查书 目前不及豆瓣的功能： 没有已看，想看等列表 我一直在找一个比较恰当和好的方式来管理这些（拭目以待把！） 没有豆瓣的文章等 没有办法随时看自己的个人主页和广播 如果以上功能对你来讲没啥用，那你妥妥的可以切换啦！ 在豆瓣中使用！ 好奇不？为什么要在豆瓣软件中使用豆瓣呢。。。我录了一个视频让你直观的感受一下。 不得不说作为一个豆瓣记录的人，发现豆瓣对于自己软件内的文章提到的电影没有任何办法快速查询在豆瓣的状态我也是没办法。。。就比如你在看豆瓣里的一篇文章（我现在很多时候都会看一遍首页那些推荐），文章里提到了什么电影，你想知道这部电影怎么办如果好标记一下想看，该怎么办呢？ 返回豆瓣（关闭了文章） 搜索这部电影，并且标记 那之前的文章怎么办。。。？回去重新找0 0？ 或者记下来（复制下来），看完后在退出文章搜索（万一很多个电影、明星咋办） 这个流程挺醉的，如果你没有需求你不会有感觉，但你如果尝试过一两次你一定会有一句 MMP 要讲。 Info It 可以完美的解决在豆瓣内部看文章，长评论里面出现电影图书查询的所有问题！ yi，文章出现了电影名字！ 选择它，选择共享，选择 Info It，标记，查看，搞定！ ps. 视频中豆瓣打开过慢纯粹因为我在美国。。中国开的很快0 0 在微信、微博、Twitter 等使用 阅读微信文章时直接选取文字，点击分享 查看微博时直接选取文字分享搜索（官方不可以在一条微博内选取，请使用第三方客户端） 查看微博头条文章、Twitter 内的文章时，选取文字分享 Telegram 等任何软件中只要可以选取文字便可以分享 目前正在研究 telegram bot 的运作，希望有朝一日能够在 tg 上直接使用 bot 进一步的分享Todoist 待办事项等使用于使用 todo 软件，收集软件等进行整理归档的朋友 结合其他软件自带的分享功能，在打开的 Info It 页面上，直接选择分享按钮，便可以分享到任何在 Safari 中支持分享的软件。例如： 选择分享到 Todoist，可以快速将想看的电影，想买的书，想看的书加入到对应的列表中： 分享的内容为 markdown 格式，可以直接点击进入对应链接 直接添加优先级，评论，分配给 xxx 等 在日渐活跃的软件社区，支持分享的软件越来越多，机会也就越来越大。 二次社交分享分享到微博、微信、短信、Moke、Twitter、Telegram、Whatsapp 等等等 Safari 的分享支持有多少，世界就有多大！ Linnk 等聚集软件直接选择分享到 Linnk、Raindrop、收趣等聚集软件 将有兴趣的电影、图书随时随地存储！ 听播客时使用本人也是一个播客爱好者，目前使用的 Pocket Casts，但不论你使用什么客户端都一定会有 shownotes，绝大多数的播客都是内嵌地址或者附上地址，但也不排除会有少数并没有。 软件版本更新时间线2018年2月18日 App Store：1.9.11出于更好的测试和反馈效果，Info It 将会分开更新 2.0 原本准备更新的功能~ Come On！ 分享插件 更新啦！（选中文字，分享，选择 Movie Info） 使用了与 APP 内相同的全新的搜索界面 证信息充足并且界面感官一致 索列表右上角点击 Done 便可以关闭 2.同样的 单个电影详情页面，信息丰富 除此之外，加入了一个加载过度页面 证打开分享插件的速度更快，比没有加入时快一倍哈！ 如果你不小心反回了这个加载页面，按 Done 退出或者点击提示重新搜索 2月4日 App Store：1.9.10 更新：条目详情页的影片介绍，可滑动查看全部 fix Pro 用户识别错误（mainly TF members） fix 英文名没有的情况下重复显示中文名 2月1日 App Store：1.9.9** 此前测试了一个月 出于更好的测试和反馈效果，Info It 将会分开更新 2.0 原本准备一下子更新的功能~内测继续中，如果想参与内测，请关注 Telegram 频道，软件内会提示可直达。 自 Info It 1.0 上线已过一年，2.0 版本将会改变原有的逻辑，使用更美观舒适的方法搜索和加载，同时加入更多的 Pro 功能，依旧是更大的自定义化，所以也是请喝咖啡模式~ 欢迎内购支持及评分！ 欢迎来到 Info It 2.0 先行版 1.9.9： 之前的历史数据会被清除，因为数据库的大版本更新问题！ Share Extension 的搜索方式暂时还没变化，稳定后会转换！如没有英文名可能显示两遍，下一版本会修复 – 全新的搜索结果页面 – 列表展示搜索结果 基本信息：图片、年份、名称/英文名称 评分：豆瓣、IMDb 显示 “正在搜索” 提示 列表将会优先加载，IMDb 将会在后台获取，请等待一二 一开始，显示 ”更新中” 有对应 IMDb 条目但是没有分数时显示 ”0.0/10” 没有对应 IMDb 条目显示 “暂无” – 全新的单个电影条目页面 – 除列表已有信息，增加了电影介绍 增加：哪些平台可以观看此电影 增加：数据获取时间 页面中点击豆瓣分数，依旧可以跳转网页链接 点击单个条目并切换 IMDb 后加载单个条目，而不是搜索记录 – 更多 Pro 功能 – 自定义：历史搜索词默认打开缓存数目（默认3） 自定义：搜索时加载的条目数目（默认8） 10.3 以上系统可以更换 Icon 更新默认显示搜索词记录为 3，Pro 用户无限 – 异步/后台加载 –所有的搜索都进行异步加载： 搜索显示加快，没有过渡的延迟 列表搜索加快 全新的搜索逻辑和加载逻辑 – 重新设计的页面 – 软件换成 Large Title LifeAnalysis Lab 其他软件 点击进入软件介绍页面 点击 ’Download’ 跳转下载 Pro 功能 = 请喝咖啡 介绍页面 点击每个功能获取更多 开源许可页面 大量细节更新 主页最底下解释说明目前的 Pro 状态和功能 如果你搜索的记录始终是空白，说明你短时间达到了豆瓣规定的限制！ 优化：搜索逻辑，响应时间，点击单个条目减少崩溃概率 一大堆 Bug 修复 for iOS 10，取消了搜索列表的页眉和页脚 fix 后台搜索但前台显示暂无 fix 历史纪录重新搜索会重复添加 fix 搜索页面初次进入上方有丑陋空白条 LifeAnalysis Lab 只有我，目前依旧是利用闲暇时间写软件，限制较多，时间也紧张，但是依旧会慢慢更新迭代！ 2017年10月11日 App Store：1.9.6大家好！非常抱歉上个版本的内购由于我的设计存在问题，所有点击购买实际上都没有购买成功！原因是我没有提交内购的审核！并且在代码里出现了逻辑错误，这些错误在沙盒测试都没出现所以被疏忽了。 所有购买的人其实完全没有支付！这个版本重置了相关功能，麻烦愿意的请再次购买支持！ps. 感谢所有愿意支持的人！按照月活来看哪怕所有活跃的人都购买，也刚好无法担负苹果开发者计划，所以。。。0 0 设置增加了反馈！点击「设置」第一个开发者名字便可以看到啦！ 设置中增加了更新说明查看！ （因为是再用学业以及其他的业余时间开发，如果有不及时，还望谅解，任何反馈都会记录并回复！） 10月3日 App Store：1.9.5 增加搜索历史 普通版可显示5个 可以删除 点击便可以查询并且不会加入到新的搜索历史中 Pro版本 = 请喝咖啡，提前上线，请去往设置查看~！ 主要是为了担负苹果开发者计划以及后续维护，感谢！ 软件内提示评分 感谢评分！ Bug 修复 5月17日 App Store：1.7.3 APP 内直接查询 更快，更方便，任何地方都覆盖了！ 少数派的需求 具体看：放在文件夹中代替豆瓣 修复 UI/UX 更新 Bug：键盘，链接，等问题 2月27日 App Store：1.5.3 修复选取英文无法搜索 IMDb、烂番茄的大 bug 更改 UI 界面 更新 Info It 相关所有信息 增加了 你留一个好评可以让 Info It 更快 的功能 1月25日 App Store：1.5 中文影名直接转换英文搜索 无缝在后台转换中英文 支持 IMDb 数据 增加「开源许可」，「版本号」 1月8日 App Store：1.0 全面更新为 Safari View Controller： 可以强制重新刷新 后退前进键 分享按钮（和 Safari 支持的一样） 通过 Safari 登录一次豆瓣后即可： 自动保存登录的状态，实现直接在查询时标记已看，想看等。 因为已经登录，当然就可以评论等了 如果一段时间后没了重新登录一次即可 增加「功能及问题解决进度」 嵌入我自己使用的 Airtable 面板，直接查看所有的进度 反馈系统更改 关于 Bug 可以依旧使用 InstaBug 的系统 增加了 Airtable 表单直接反馈 更新「FAQ 及已知问题」 更改为 Airtable 展示，这样我可以实时更新 有任何问题先查看，再反馈！ 增加「所有版本更新说明一览」 所有版本更新查看 可以直观的看到所有的版本更新情况 关于全局分享搜索 未来会增加任何地方的分享（不仅仅是选中文字） 目前仅会提示报错 Bug 解决等 iPad 上信息显示不足的问题 解决了几个超级大 BUG！ 修复了几个内存和查询问题 主 app 更改了一些细节 2016年12月1日 beta版本：0.5.2 支持搜索：豆瓣图书，烂番茄指数（目前不会再增加了） Action Extension 增加图标 更新 FAQ 和已知问题（关于 Safari View Controller 请进去看） 11月28日 beta版本：0.2.5 添加反馈系统 添加反馈说明 增加「FAQ 及 已知问题」 支持了 iOS9 以上机型 主界面点击后不再有灰色底色 带有 i 标志的设置项需要点击 i 才会进入，避免误触 更改主界面颜色和排版 更新 Info It 介绍 去除「如何使用」中的翻页效果（避免卡顿） 增加了「完整 APP 信息及更新情况」跳转 解决了搜索中有空格导致无法搜索的问题 开始 2016年11月24日美国感恩节当天Info It 第一次上传至 iTunes Connect]]></content>
      <categories>
        <category>iOS Develop（iOS 开发）</category>
      </categories>
      <tags>
        <tag>swift</tag>
        <tag>iOSDev</tag>
        <tag>iOS APP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS开发相关分享 @iosdevswift 说明（Twitter，微博）]]></title>
    <url>%2F2017%2F02%2F19%2Fiosdevswift%2F</url>
    <content type="text"><![CDATA[IntroEnglish： Sharing iOS developing and swift learning related stuff. Make developing easy and quick. All articles are the things I meet with or want to achieve 中： 分享在 iOS 开发以及 Swift 使用中遇到的困难，解决方法，问题，教程等等，数量不多，因为都是个人遇到的才会分享 订阅开发者头条： 开发者头条订阅，APP 内直接搜索 29225 也可以 iOS开发与Swift Twitter 通过 P.cat 分发 Twitter is the main platform to share, click to go. 点击关注Twitter @iosdevswift Weibo 通过 P.cat 分发 Weibo is the sub platform to share, click to go.(sync using P.cat) 点击关注微博 @iosdevswift]]></content>
      <categories>
        <category>iOS Develop（iOS 开发）</category>
      </categories>
      <tags>
        <tag>swift</tag>
        <tag>iOSDev</tag>
        <tag>blog</tag>
        <tag>language</tag>
        <tag>learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于 o1xhack.com 的 blog 搭建]]></title>
    <url>%2F2017%2F02%2F19%2Fblog%2Fabout-blog%2F</url>
    <content type="text"><![CDATA[简介o1xhack.com 域名购买自 goDaddy，使用 dnspod 进行解析，基于 hexo 和 github page 搭建的静态博客。 hexo 主题使用大名鼎鼎的 next。 菜单栏说明开发者： 既然作为一个开发者，没有一个像样的页面说明可不行！ iOS 开发经历及 Swift 学习相关 学校项目以及学习相关分享（still struggle！） 尝新者： 从接触 cs 之前就已经尝试了不少 app，iOS 为主作为一个准备从事科技行业的骚年，怎么能没有尝新的态度呢？ iOS APP 相关分享 macOS 软件及使用分享 Kindle 等电子产品分享 智能家居、智能硬件分享 生活者： 生活着，就是全部。 数据生活，量化自我 读书看报听播客 生活分享 相关 Tips 更新时间线2017.2.24 增加了 生活者 2017.2.19 增加了 开发者、尝新者 定制主题 2017.2.18 blog 正式上线 增加了 分类、标签、关于我 定制主题 首页文章标题、阅读更多显示居中]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kindle 笔记导出到印象笔记，分析与完全解决方法]]></title>
    <url>%2F2016%2F08%2F11%2Fkindle%2Fkindle-export-evernote%2F</url>
    <content type="text"><![CDATA[永远的命题从 Kindle Paperwhite 到 Oasis, Kindle 越来越完美，电子书逐渐成为了一种趋势，在电子书的体验上依旧有十分多的地方可以改进，Kindle 或任何其他服务都不可能一统江湖，简言之，读书所得到的东西也就越发的重要，我们应该在意的并不仅仅是在哪里看，而更应该是如何梳理。 生活者：生活着，无限可能 大多的导出方式：通过 Clippings.txt 关于 Kindle 导出笔记的方式的文章不在少数，但作为一个喜欢追求完美，并且喜欢整理的人，这些方法往往不尽人如意。 Clippings.txt 是 kindle 系统里的一个文本，每一次你在 kindle 设备上标记笔记的时候都会输送到这个文本文件中，这也就是绝大部分软件所采用的策略。最简单的方法不过于将 kindle 连接电脑上后，直接复制黏贴到印象笔记。（最 low ） 接下来我将会分几点讲一下第三方软件导入的优势劣势，以及其他直接应用 clippings.txt 来导入的问题。 运用第三方软件导入好处主要是可以加入标签等等管理系统，可以统一管理，然后进行导出到印象笔记。 PC 上的软件各式各样都有，包括本地端以及 web 端，这些软件的介绍已经都在这个知乎问题中回答的很详尽，我就不一一列举了： 如何将 Kindle 标注读书笔记导出到 Evernote 印象笔记？ mac 上近期也是冒出许多的 kindle 软件，好看的不好看的都有，如果有兴趣可以去查看一下。 说一下 Clippings.ioClippings.io 是一家知名做 kindle 笔记整理的软件，免费版本只能上传 Clippings.txt 文件来导入，它在各方面的整理，优化上都表现优异，因此被各大网站所推荐，以我的发现，外国人的推荐偏多，至于原因，等我们稍后讲到收费版你便会明白。 我们就以 Clippings.io 为栗子重点说一下这种 txt 导入方法的不好的地方。 Clippings.txt 的问题既然是一个本地 txt 文本，当然仅会当你所用的这台设备上有任何动作时，记录下来，就像是你在你的 kindle 上安装了一个监视器，你在你 iPhone 上的一举一动自然不会被监测到。 这也就成了一个十分大的问题 你在你的 Mac，iPhone，iPad，或是任何其他手机端 PC 端上使用 kindle app 的话，你记录的摘录，笔记，都不会在 kindle 的设备里的 txt 文档中出现。 简而言之：如果你经常切换设备看书，那么你就没办法享受到完整的笔记导出！ 不客观的说：如果哪怕有一次切换了设备，你的笔记就也许会不全面～ 也许你都不会再次查看笔记，但是心里知道不全总归会有那么点小不爽 看到这里，如果你仅仅在 kindle 上看书，其他设备连 kindle app 下载都不下载，那么这篇文章也许对你没啥意义～ 你可以抱着观望看下去，也可以戛然而止0 0 Clippings.io 的收费服务那么收费版本又有什么玄乎呢？先来看一下收费版的价格和介绍： 这项每个月2美金的服务可以保证你切换不论多少台设备，你的笔记都完整的存在。 听到这里是不是很开心？ 不要慌。。这跟我们没啥关系。。因为。。人家用的是 Amazon 自家的 highlight 服务，来张图看下： 我们可以看到 Amazon 自家有一个 highlight 服务，简单的说，将所有的标记储存在了云端。这也就是为什么可以保证你哪怕用着十分多的设备换来换去标记也没事。 然而，这和所有中国区的用户没任何关联，因为中国区没有这个服务！曾经有上线过，然而就没了，大概只能指望上线吧= =所以这项收费服务对使用中国亚马逊的我们是没有任何用的- -就别想太多了，买了也没用。（因为我购买了并且和他们的人发邮件联系过0 0） 比较复杂的另一个导出：涂书笔记应用不打广告，但是这软件被弃了也是让我伤心了好一阵子，作为一个强迫将所有的笔记都整理的人，这个软件还是颇有风范的。简而言之，是通过 ORC 扫描识别转化为文字后储存，其实很多扫面软件都可以做到，但是涂书笔记拥有专门的书本分类。 由于项目被放弃（我猜的，没有消息来源），已经长久不更新，不是配 iPhone 6 及以上的分辨率，印象笔记导出也有很大问题，目前我的手机上已经无法使用导出。 另一个十分麻烦的地方就是：会将你的阅读体验弄的十分糟糕，需要联网识别，而且需要拍摄，十分容易打乱你的阅读步骤。或者你可以选择读完之后在统一扫描导入，但是也会变得十分的繁琐，会很无趣。 好处是，你不会局限在设备的切换而导致的笔记不全下。 直接通过 kindle 的发送邮件导出其实我是愿意支付每个月 2 美元的费用来达到十分简单方便的导出的，相对于这个价格来说，困扰与这个的不爽和扫描一个个笔记的时间成本，十分划算啊，但是谁让中国区的 Amazon 没有 highlight 这项服务。尝试了各种方法后，我总算找到了一个让自己满意的方法。 直接通过 iPad，iPhone 或者 Mac 端的 kindle app 来导出笔记（sorry 我并不清楚 android 或 PC 是否有，但不出意外肯定有，也许会有些许步骤不同）这个方法其实早就存在，通常是到笔记里选择分享 电子邮件，然后发送到印象笔记绑定的邮箱中。但是！问题很大啊，不知道用了这个的小伙伴们是否发现了呢？ 首先，排版十分的糟糕！看图吧。。（如此密密麻麻没有区分，虽然由搜索功能，但谁不喜欢简介好看的！） 其次，经常会出现各种乱码情况，没有任何征兆，就这样背叛了我！ 但是通过这个方法，改变一下策略，就可以解决这些所有的不好，还依然的简单方便并且全面，达到下面的效果： 真正简单又不会出错的方法 通过 kindle app 自带的导出服务完美保存（对上一种进行小更改） 我会一步步的截图，但是前面几步如果你使用过自带的导出服务应该是很熟悉，可以快速的过掉。 首先打开 kindle app 客户端（iPad，iPhone，Mac） 打开任意一本你想导出的书籍，点击界面的 笔记按钮，会进入下面的界面，点按右上角的 分享 按钮，选择 电子邮件 选择你想要的引用风格，如果你不懂，直接选择无就好，这些都是专业性文章如果引用的话需要的格式而已。点按 导出 这时就进入了邮件发送界面（苹果用户如果不用自带邮箱只要开了 iCloud 自动会有 iCloud 邮箱，不用再加入一个） 这时候输入你想要收到的邮箱，建议选择自己的邮箱， 从这里开始就和通常的方式不一样了 进入自己的接受这个邮件的邮箱（我用的是 Airmail 客户端），或者进入自带邮箱的 已发送 文件夹，如图 看到邮件中的导出笔记了吗？一个由 xxx.html 文件生成的 html 文稿 点击这个文稿，会自动打开 选择右上角的分享按钮，选择 印象笔记（Evernote） 这时候，打开你的印象笔记，你就会发现惊喜！ 原因只是简单的改变了一个步骤，就会变得很方便主要原因是因为如果发送到 kindle 的邮箱，会变成纯文本格式，用过 markdown 的人都知道，html 也是一种扩展格式，富文本，是 kindle 邮箱无法识别的 但是 印象笔记 是支持各种格式的，所以可以直接是别出来，保存的时候就会将格式都保存下来。 通过这种方式： 不会因为使用多设备儿导致笔记丢失不全（通过第三方软件导入 txt 文件一定会有的问题） 在亚马逊中国区开放 highlight 平台之前属于万能的方式 不会有 kindle app 自带分享时导致的文本格式无法看以及乱码问题 比一条条笔记自己去识别要快速的多 不像导出的 pdf 或者其他文件浏览器来不方便 可以随时编辑，搜索速度也快 需要注意 通过 kindle 自带分享不能超过全书内容的 10%， 否则属于侵权行为无法分享。 我相信很少有人会超过哒！]]></content>
      <categories>
        <category>kindle</category>
      </categories>
      <tags>
        <tag>kindle</tag>
        <tag>books</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「mac」释放 macOS 菜单栏潜能的软件们（十五款）]]></title>
    <url>%2F2016%2F07%2F27%2Fmacos%2Fmac-menubar-app%2F</url>
    <content type="text"><![CDATA[转至：持续文章更新列表，建议收藏 前言 一款好的软件不但可以节约时间，更能让你体验系统的魅力。 想知道我的 Mac 菜单栏都有什么嘛？这是一篇简单的介绍 Mac 菜单栏工具的文章，共计 15 款，每一款点击都可以直达官网。 大多数软件都提供适用版本，建议先行试用在决定是否购买，如没有试用版可以回复你的问题询问详情！ 只有最适合你的应用，才称得上是效率应用。 尝新者：尝试一切新鲜的事物 题图就是我的菜单栏啦！ 要知道菜单栏堆积，的确就如同 iOS 上软件从不排序一样令人不快，无法快速找到想要的对应应用，无法快速的查看自己有什么是还未读的。我会将我的菜单栏的应用介绍一遍，并简短说明用途以及为什么需要它在菜单栏。 更新说明2017.5.26 文章增加了 目录 所有软件介绍中间都增加了 返回目录 的链接，方便移动端查看 2017.2.20 #神奇的小工具，中 Theine 更新为软件：Amphetamine 2016.7.22 #神奇的小工具，中增加了软件：iPic 目录管理及快捷的神器 Bartender 2 Manico Fantastical 2 TotalSpaces 2 量化自我及监测 iStat Menus WordCounter RescueTime TripMode Paste 2 文件级系统管理 CleanMyMac CleanMyDrive 神奇的小工具 Amphetamine f.lux AutoMute iPic 管理及快捷的神器（4）所有的管理软件也许都有许多相同类似功能的软件，以下是我用的最久并且依旧在用的。 Bartender 2 返回 目录 当接触越来越多的软件驻扎在菜单栏时，我就想，为什么没有像 iOS 的 Dock 栏这样子的设计呢？普通的用户自然没什么，一共几款软件，可是越是明白各种小工具的厉害，就越是堆积了很多软件在菜单栏，而 Bartender 则完美解决了这个痛中之痛，可谓是达到了 快准狠 原则的最高级别，自从我买了第一代之后，我就真的是从未后悔啊！ 说白了，Bartender 就是创建了一个类似于 iOS 上 Dock 的玩意儿，在 iOS 上不论你怎么滑，Dock 都是你触手可及，而 Bartender 就是让一部分软件永远可以一眼看到，另一部分需要时才用得到的软件隐藏起来，还有一部分你压根看都不想看的给完全隐藏。 可以自己调每个软件的位置，达到一个区域一个需求，从而可以更加快速定位你需要的软件 收放自如，可以保持二级菜单永久显示，也可以选择立马隐藏，快捷键可以快速打开 为了避免应用太多，更是有搜索功能哟！ 支持按住 cmd 后拖动图标自定义排序（据说 Sierra 重默认有了这个功能） Manico 返回 目录 数不清的快速打开软件的应用，还是喜欢这款由国内开发者 图拉鼎 开发的 Manico。这类软件当然是适合最好，如果你喜欢用搜索的方式打开，那么可以考虑其他的软件，如果你像我一样，只有少部分软件需要能随时调用打开，又不想记很多的规则和快捷键，那么 Manico想必会挺适合你。 直观，当你按下 Option 的时候，你可以快速看到自己设定的程序对应的快捷键，不用担心忘记 Fantastical 2 返回 目录 为什么划分成神器？想必很多人不解。其实这个每个人的使用背景有很大的关联呢！可不要看我说神器立马就去买哟！ 在事情越来越多后，我需要很合理的划分出来课程时间，老师们以及 TA 的 Office Hour，与我专业部门约好的问答时间，要出去采访的时间，甚至约好的晚饭时间都需要能够直观的看到，而正是各种（很依赖时间）事件的增多，Cal 5 已经完全不能满足我的需求（尤其它只有 iOS 版本） 当依赖时间的事件越来越多后，TODO list 是无法满足的，因为这些事件都有一个统一的标签：时间。我一天的课程和各种事项加起来，整个日历需要能够让我一眼，看清楚哪些时间是空的，什么时候可以去吃饭，根据空余的时间决定去哪里吃比较适合，包括什么时候适合来一杯咖啡，如果是繁忙时间段，下课的十分钟是根本不够的，需要三十分钟也许才够，而根据时间的调度，非繁忙时间段下课十分钟就完全足够了。 而这一切不仅是需要在 iOS 上可以清晰客观的看到，Mac 上也同样需要，效率应用，就是说在尽可能减少繁琐流程的情况下不被分心的增加自己效率，当快下课时，在 Mac 的菜单栏上我可以直观的浏览接下来的时间规划，从而得出，是去干什么，仅需要一眼就可以，而如果每次都拿出来手机，下滑通知栏，字体也小，并且手机会容易让你想要玩一玩的冲动，会大大减少你的效率讲了这么多，就是想说明一下在我个人的背景下，为什么会觉得这是一款神器，因为它的的确确将我的时间规划的完美的演绎出来并且一点不杂乱，不论是快速的增加还是快速的查看都可以做到随时随地。 有部分功能可以深入研究，这里就不多说了 TotalSpaces 2 返回 目录 用这款软件仅有一个月之余，高达 14 天的免费体验让我彻底沦陷进去，从前我只有四个桌面，不是因为不加，而是因为太多了根本滑不过来，现在我有九个桌面，快捷键加上下左右键完美切换，铺展式的桌面在缩略情况下也更加直观和方便切换，再加上快捷键的自定义和桌面的名称定义，完全可以让桌面这个本来就很强势的功能更加的强势，并且支持软件仅在某一桌面打开哟~ 量化自我及监测（5）iStat Menus 返回 目录 高量级别的监测工具，监测系统的各项指标，我主要用的是和 wifi 相关的模块，如果觉得大材小用了可以考虑一款名叫 Bandwidth+，小巧方便免费，一直持续维护，单一功能，也就避免了 iStat Menus 会占用过多内存的原因，这款监测软件不仅因为监测的功能多闻名，也十分的精准，并且支持各项的自定义功能，可以定义模块显示将不通的监测量放在一起。 WordCounter 返回 目录 作为一个爱写作的人（虽然写的不过），必须有一个能量化自己目标的东东呀，正当我打着这个文章的时候，抬眼一瞟，yi，今天码了 800 多字啦！点开详情一看0 0 一般都是 Safari 的错！但是当从 0 到一篇文章结束，看着 WordCounter 不断的变化直至最终码完字，是一种成就感！支持日历模式查看历史记录，可以自定义监视的 APP，可以监视文件夹，选择监视文件的格式（txt, md 等）。 RescueTime 返回 目录 作为一个 APP 爱好者，都有一个执念，那就是时间管理这个坎，手机上不算多但各式各样的统计软件，但由于 iPhone 的限制，无法做到自动监测所有 APP 的时间使用，尤其是伴随着其他事件（与手机无关事件），在这个电脑频繁出现，学习需要查找资料，PDF 浏览，PPT，Word 等等的协同下，用电脑来记录时间就变得越来越有意义了，尤其是电脑的权限要大于手机许多。在此之前，用了几个月的 Timing 软件，但最终决定 RescueTime 主要是因为： 可以记录不同网页的对应不同的事件（部分网页识别无效只需要统一规划一次即可，一些看了一眼的网页，根本就无需管理让它继续成为 未分类 即可） 有高级版本（似乎很多人觉得有高级版代表不好），事实是，一款优秀的软件，拥有订阅模式的高级版本，就说明它的未来维护和帮助系统一般都比较的好（那些不好的渐渐都走下坡路） 第一点尤为重要，RescueTime 只是一款小工具软件，下载后会默默的再后台记录，所有的记录都是保存再云端，需要点击网页查看，配合 Safari 已经增加的 Pin 功能，你可以十分方便的经常打开这个网页，并且可以接受邮件报告，我也一直在犹豫高级版，最近决定试水一下，另外，gyroscope 也支持 RescueTime 的数据哟~ 更多就不说啦 TripMode 返回 目录 作为一个时常带着电脑的学生党，没有网可是十分的难过啊！然而电脑商分分钟的流量跑走也是很不爽，认真地算一算，如果你流量包一直加，不停超，对于热点的依赖比较大，哪怕这款软件收费，也是值了呀！要知道，重要的不是收费多少，而是它能给你带来的满足感，愉悦感，就是这么简单清爽的简介！ Paste 2 返回 目录 虽说 Sierra 即将带来全新的通用剪贴板功能，然而 Mac 作为一台生产力工具（ 看这篇文章的我就默认不是拿 Mac 之用来看看电影咯…）剪贴板的历史其实是很重要的，Paste 就带来了这么一个全新的功能，你可以通过快捷键（⇧+⌘+V）快速打开 Paste 2.0 版本重新设计了软件页面，现在 Paste 不再会遮挡整个页面，而是行云流水版的直接从下方滑下来占用略微超过三分之一的空间，支持直接粘贴，双击即可粘贴到你目前所在的地方，并且有了标签功能，可以将最长用的设定一个标签放入（邮箱等）方便直接复制粘贴，而不必要一遍遍的输入。 文件级系统管理（2）这两款都来自于 MacPow 家的管理软件，有劣势，但也是说一不二好的壮汉。 CleanMyMac 返回 目录 据我所知应该是大名鼎鼎了吧！主要是清理系统垃圾，查询大文件，完全卸载软件（部分权限高的自带卸载功能更佳），总的来说就是你们知道的 xx卫士 系列之非流氓版本！对于一个懒人来讲，有人给你定期整理垃圾，告诉你大文件是啥没事儿就快删了，帮你干干净净卸载软件，清理你的照片垃圾，邮件垃圾，iTunes 同步垃圾等等扩展功能，这个价格也是值得！他在状态栏主要帮我清理内存，想必当你开启 Chrome 看了很久视频之后会发现很卡，直接有效的清理一下会好很多，大招就是退了重开哈哈！（如果你需要一款更深度的文件扫描软件，推荐 DaisyDesk） CleanMyDrive 返回 目录 作为同家产品，但是免费供应，也是让我觉得有意思，不禁试了一试，发现也是十分的好用，想必大家都知道 Mac 软件安装，和硬盘都会再桌面上留下一个磁盘图标，如果你从来不推出安装包，那么想必是铺满的，这款软件就是讲究一键推出所有挂载的磁盘类工具，不论是啥！ 神奇的小工具（4）一款专精又小众的软件，往往能让你在结局一个挠破脑袋也无法解决的小问题。 Amphetamine 返回 目录 作为一个喜欢美剧，电影等需要大量下载的用户，不免会经常遇到想要将电脑放一整晚不自动休眠的状态，而每一次到设置的节能选项中去更改时长又十分的麻烦，于是一款可以禁止休眠 x 分钟的小工具就非常必须了，之前有名为 Caffeine,Theine 等是可以达到这个效果，但是由于 Caffeine 上次更新依旧是 2010 年，后期对系统的兼容也很有问题，时好时坏，不得不放弃，然后更换到 Theine 这款小工具，的确完美代替，但是仅仅的简单功能只能满足基础，需要手动的操作。直到 Amphetamine 出现，可以设定各种各样的规则： 设定某个 app 启动并且接通电源的情况下自动开启 设定某个 wifi 连接上自动开启 电量，app，wifi 各项条件都可以随意调整，设置出你最喜欢的感觉！ 可以选择，点按图标直接激活/取消激活，这样子无限就也变得很方便 可以黑色灰色显示不同状态，更容易分辨 f.lux 返回 目录 什么也没有自己的眼睛重要，f.lux，别的不多说，光凭需要好好保护眼睛，这款小工具就必须常驻！并且支持短暂性的取消暖屏效果（当你在看电影），使用体验，如同 iOS 9 的 Night Shift。 AutoMute 返回 目录 一款开源的软件，解决尴尬症的各种问题，从此不再担心上课玩电脑放电影一不小心声音出来了。 通过设定特定 Wi-Fi 下静音来达到自动切换静音的效果 iPic 返回 目录 一款图床神器，什么是图床？Google 一下你就知道！ 支持七款图床，国外的免费 Imgur 和 Flickr 都支持（但是需要 25/年） 拖动直接上传，并且可以将图标地址直接复制到剪贴板 地址支持普通格式和 MarkDown 格式 快捷键上传图片 可以设定拷贝图片自动上传]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>mac</tag>
        <tag>菜单栏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift 学习日记 - 3（复习与程序相关）]]></title>
    <url>%2F2016%2F07%2F25%2Fswift-learning%2Fswift-learning-3%2F</url>
    <content type="text"><![CDATA[diaryNum += 1 // 新的 Swift 去掉了 ++ 符号 print &quot;Hello Again！&quot; print &quot;Welcome to Swift Learning Diary &quot; + String(diaryNum) + &quot; !&quot; Welcome to Swift Learning Diary 3 ! 点击进入 → Swift 学习日志 - 目录/相关资料 FollowLight 改进print &quot;Still that Silly!&quot; Still that Silly! A new Start虽说已经可以逐渐做一些小的增加和改动，但是对于基础的掌握依旧需要长时间的练习，一遍遍的训练和掌握。 使用书籍「Swift 与 Cocoa 框架开发」 复习2.1 - 2.5 Tuple，元组，将多个值捆绑到单个值中 空数组，需要人工指定类型： Int Dictionary, key to value. 不同类型也可以 0 ..\&lt; 10 // 0 到 10 不包含 10，for xx in xxxx 0 … 10 // 0 到 10 包含10 lf-let 语句用来检查一个可选变量是否包含值 强大的 switch，根据 Tuple 进行切换，可以编写非常特别的 case，仅当其中一个组件与条件匹配时再进行 2.6 定义函数可返回值时，需要用 “ -> ” 函数仅可返回一个值，但是通过使用 Tuple，可以将多个值捆绑放入单个值中 在参数名前面放入 “ # ” 号，使得内部名字和外部名字相同 为函数单独命名了外部名字时，调用时必须使用这个外部名称 可变参数，取值数目可变，使用方法像数组一样 (仅最有一个参数可以是可变参数) func sumNumber(numbers: Int…) -&gt; Int { // Int 后面加 … 表示为可变参数var total = 0 for number in numbers { total += numbers } return total } inout，直接改变这个变量中储存的值。用一个函数交换两个变量。 func swapValues(inout v1: Int, inout v2: Int) {// 交换两个数的位置} swapValues(&amp;num1, &amp;num2) 通过让函数捕获一个值并多次使用，可以创建用作生成器的函数（每次调用时返回不同值的函数） 2.7 闭包，内置 sorted 函数。可以接受参数，XCode 可以推断参数的类型，可以储存在变量中，调用方式与函数相同 继承，包含被继承类（父类）的所有函数和属性，只能有一个父类（C++ 允许多重继承）。通过 override 可以重写父类中的函数，用 super.xxx 调用父类中的对应值。 定义计算属性：同储存属性一样声明一个变量，在后面加入 { 与 } 在属性发生变化时运行某些代码，向属性添加观察器，属性后面添加 { 与 }，包含 willSet 和 didSet 代码块 惰性属性：直到首次访问时才会设定，关键字 lazy 定义协议：创建一个属性和方法清单，与类十分相似，但是不提供任何实际的代码，可以引用任何遵守某一给定协议的对象，这个类的具体类型久无关紧要了 可以扩展任意类型，既可以扩展自己编写的 class，也可以扩展内置类型 情况：向别人编写的 class 中添加功能，但不能访问其代码或不想浪费时间时 情况：使用自己编写的 class，但希望将其功能划分到不同部分提高可读性时 extension 中只能增加计算属性，不能增加自己的储存属性 将一个属性的 setter 声明为私有的，可以使这个属性只读，源文件可以随便读取改写，但其他文件只能读取值 利用泛型可以将 class 的类型设为一个可变化参数，在之后的调用中任何类型都可以（class Tree\ { }） 2.8 - 2.End Objective-C 中使用 Swift，在对象前面增加 @objc Swift 中使用 Objective-C, #import 苹果编写的书：Using Swift with Cocoa and Objective-C 内存托管：使用时，放入内存中，不再需要时，从内存中删除。引用计数是 Swift 中用来跟踪对象是否还在使用的技术，将对象指定给变量时增加 1，不再指定减少 1，降到 0 时便从内存中删除 需要留意的问题：循环引用，两个对象互相引用，但未被其他任何部分引用。 弱引用来解决，一种变量，引用一个对象，不改变对象的引用计数（关键字 weak） countElement 可以计算任意集合中的元素个数（数组，字典） 数据模块：NSData 遵循 NSObject 和 NSCoding 协议下，可以将对象转换为数据 模型-视图-控制器：MVC 将应用程序划分为责任区后，修改将变得更为轻松，通过明确定义哪些对象负责哪些功能，可以更轻松的修改应用并使项目结构保持清晰 对象的委托 应用程序 Info.plist 非常重要 通过 NSBundle，无论代码在哪里，应用程序都可以正常工作，代码通过这个类可以知道自己在磁盘上的位置以及如何获得编译后的资源 macOS 生命周期 首先打开 Info.plist，系统因而知道编译后的二进制文件在哪里并启动 接口对象：在设计时准备的，与应用成语一起打包的对——预先准备的窗口，控件和屏幕。存储在 nib 文件内部。 从 nib 文件解包一个对象时，会发送 awakeFromNib 消息，对象便可以运行代码。（向 nib 中添加对象时便被创建，保存 nib 时，对象被冷冻起来，在打开 nib 时，对象被唤醒，之后便会发送消息，让它知道此时状态已经清醒） 应用程序准备可以运行，向应用程序委托发送 applicationDidFinishLaunching 方法。 进行运行循环，监听一切发生的事情 当用户选择另一个 APP 时，收到 applicationWillResignActive 的消息，表示 APP 不再活动 收到 applicationDidResignActive 方法确认 APP 的确不再活动 分开的原因：切换另一个 APP 时，代码可以继续控制屏幕内容的变化，再调用 Will 时，程序仍然在屏幕上，当不可见时，会收到 Did 方法 用户回归 APP 时，收到类似之前的方法，applicationWillBecomeActive 和 applicationDidBecomeActive 最终退出时(⌘Q)，收到 applicationWillTerminate，最后一次保存文件的机会 iOS 生命周期与 macOS 区别： 屏幕一次只能显示一个程序 电话，通知栏等会打断程序使之变为后台程序 生命周期基本相同 程序完成加载后，增加的参数：Dictionary，包含了有关为什么启动程序以及如何启动（点击，分享，URL） 关于 Resign 方法，macOS 上时 NSNotification 对象，而 iOS 上为 UIApplication 退出时的变化，多任务： 按主屏幕按钮退出后，程序被挂起，停止执行代码，内存被锁定 程序仍在内存中，没有退出但停止消耗 CPU 及其他硬件资源 当开启的程序需要更多的内存时，程序被终止，不作任何通知 applicationWillEnterBackground 在程序被移到后台后立即被调用，程序应该在这个时候保存所有数据 applicationWillEnterForeground 在程序即将回到屏幕上之前被调用 通过减少程序所用的内存（释放大的对象，卸载图像等）来降低被终止的可能性 将内存降到 16MB 一下：低于这个量额程序会被存储在闪存中，从内存中彻底移出，当程序恢复时，再次从闪存芯片的存储内存中重新加载，因此，不会因为其他应用的内存需求而将程序从内存中去除 程序可以申请在后台段时间运行，不超过 10 分钟，为了让程序完成一个需要长时间运行的过程（将大型文件写回磁盘，完成下载等），时间结束后，程序需要告诉 iOS 已完成或者将被终止（不是挂取） 后台获取与后台通知的增加，需要专门开启，设定的最短间隔唤醒时间并不一定被 iOS 采纳，iOS 会有自己的机制来避免不必要的损耗 音频类应用可以在后台持续播放；后台跟踪位置的应用可以运行任意长时间；网际协议电话（VoIP）可以定期运行 沙盒机制 iOS 中一定存在，无法抉择 macOS 之前可以选择，现在一定需要（mac app story 不接受非沙盒的，因此更多的开发商选择了官网直接发售而不是商家 MAS） 沙盒可以将系统级的文件被隔绝出来避免各种安全性的问题，哪怕软件用可以被利用的 bug，因为沙盒的限制，它依旧不能改变系统性的东西，所以杜绝了安全性的问题 不可使用私有 API，只能使用文档中已经表明的]]></content>
      <categories>
        <category>Swift Learning（Swift 语言学习）</category>
      </categories>
      <tags>
        <tag>language</tag>
        <tag>learning</tag>
        <tag>swift3.0</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift 学习日记 - 2（UIAlertController）]]></title>
    <url>%2F2016%2F07%2F21%2Fswift-learning%2Fswift-learning-2-uialertcontroller%2F</url>
    <content type="text"><![CDATA[var diaryNum = 1 diaryNum += 1 // 新的 Swift 去掉了 ++ 符号 print &quot;Hello Again！&quot; print &quot;Welcome to Swift Learning Diary &quot; + String(diaryNum) + &quot; !&quot; Welcome to Swift Learning Diary 2 ! 点击进入 → Swift 学习日志 - 目录/相关资料 FollowLight 改进 胜利提醒增加了你玩的轮数（winningNumber） 胜利后增加选项，可以直接增加难度（call 增加难度的 func） 失败提醒增加了你玩的轮数 开始游戏是询问是否确定，并提示点击确定便会将 winning number 的轮数变为1，这样你随时可以重头再来 UIAlertView 的退役UIAlertView 全部被 UIAlertController 给替换，在新版本的 xCode 中，会相应报错，并且有官方文档予以参考（Important: UIAlertView is deprecated in iOS 8.）继承于 UIViewController （前一本书有讲过关于继承的问题，inherit） 以下代码引用更改自 XCode 帮助文档，没有直接拉过来是因为用实例更适合解释和接受概念（帮助文档还是需要一定基础看懂的吧…） UIAlertView 之前什么样子？var name : UIAlertView = UIAlertView(Title: &quot;你想要的提示&quot;, message: &quot;在提示下面的小字信息&quot;, delegate: self, cancelButtonTitle: nil, otherButtonTitles: &quot;按钮&quot;) name.show() //改自书中案例 如果在其中想要添加动作的时候，需要另外使用 delegate，其中有参数 alertView 和 buttonIndex。具体的不细说，但是新版本的确优化了许多。 UIAlertController 的改变以下代码都在一个函数中（func alertExample { }） let name = UIAlertController(title: “你想要的提示”, message: “在提示下面的小字信息!”, preferredStyle: .Alert)首先去除了 delegate 以及之后的所有东西，在整个提示中变得间接许多，要知道，精简就是一门学问，这样子的改变可以一眼看出来提示的信息。string 字符串中可以将变量转换为 string 字符添加到提示语句中，这样子可以拥有灵活性的提示 新增加的 preferredStyle 目前有两种可选：enum UIAlertControllerStyle : Int { case ActionSheet //底部弹出提示框 case Alert // 中间弹出提示框 } 当初的动作添加也顺势的变成了如下：（当然，动作并不是一定要添加的，是可以没有任何动作只有提示的）name.addAction(UIAlertAction(title: &quot;按钮&quot;, style: .Default) { _ in // 你想要它做的事情 }) present 模式继承了 UIViewController：self.presentViewController(name, animated: true){} 对于提示框的选择主要就是这些，最基础的内容，可以尝试在程序中添加各种提示，包括提示后的动作，动作里调用其他的提示函数或者普通函数来进一步的动作。 推荐文章：iOS-个人整理16 - 警示框–UIAlertController]]></content>
      <categories>
        <category>Swift Learning（Swift 语言学习）</category>
      </categories>
      <tags>
        <tag>language</tag>
        <tag>learning</tag>
        <tag>swift3.0</tag>
        <tag>uialertcontroller</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift 学习日记 - 1]]></title>
    <url>%2F2016%2F05%2F25%2Fswift-learning%2Fswift-learning-1%2F</url>
    <content type="text"><![CDATA[终于解决了这学期的所有课程！ 于是开始自己的奋战 Swift 之路。 目标是暑假结束时上架一款属于自己的 APP！ 点击进入 → Swift 学习日志 - 目录/相关资料 使用书籍「SWIFT基础教程」 亚马逊 Kindle 版，1st Edi「SWIFT for Beginners」英文版，2nd Edi 开始由于实在不想直接从英文版读物入手，毕竟入门我还是很担心英文版会太慢。 但是买的时候 第二修订版 还没有出中文版，于是买了第一修订版，based on Swift 1，大家也知道 Swift 2 更改了不少东西，还好 xCode 非常的贴近人心，有地方更改基本都会指明，只有少部分的大更改需要自行解决，但这也给予了非常好的一点：你可以更加钻研进去，看书只能是辅助，看的 code 越多越来越发觉如果只是照着书上给你的例子来码代码，根本无济于事，你不理解为什么，你不理解以后怎么用。 记得看到一篇大神文章说，现在很多人，学代码，只知道跟着步骤走，我除了一个非常简单的题目，无所谓你用什么语言，只要能将整个流程写出来，验证出来，就说明你懂得是程序猿的思考逻辑，而不是一串串可以 Google 的代码。 在第 9 章写一个 iOS 程序时，有较大的问题，基于 code 本身就要复杂与书中讲解，UIAlertView 在 iOS9 中被启用，而新的 UIAlertController 需要自行 google 钻研一下，如有问题可以问我！ 语法学过 Python 和 Java 的部分，对于部分语法也是有很大的熟悉度，尤其是 Iterator 和 Recursive 非常有印象- -（Java 中不少 code 都在写这俩），所以语法不算难事，只要跟着整本书过一遍，基本没什么问题。建议在过的期间可以自己多写几个相关的 method，吃的透彻一点，否则等到后面看一堆又傻眼还得回去重新温习。 难点？第 8 章之前中。 闭包，这个在后面的运用对我来讲颇为复杂。 类的继承，这一部分的理论和概念要清晰，明白继承的作用，书中详细说明了为什么用继承，和什么时候用继承，建议记下来，可以温习 协议和扩展，之后的很多 code 中都直接使用了 Swift 中一些自带的协议，如果不吃透，在后面的解释中可能直接懵逼！ 扩展中使用闭包，再一次！ 总的来说，前面那些简单的语法之后，都挺重要的hhh多吃透！ 一定要按照书中所解释的去想！去尝试书中没有的 code！ 如果遇到不懂得，就按照整个 code 的逻辑，去想明白为什么可以达到这一步 ，这是我在写 Java 各种程序时必备技能，先整理出来思路，在写，要比啥都不想就写要快得多！（个人己见~） 真正的编程 第 7 章 简单介绍了 xCode 的使用以及界面，过度~然后变开始了第一个基于 Swift 的程序，一款 Mac 上计算利息的 silly 计算器 hh这个只是个试手，非常的 EASY！让你理解一下整个 xCode 的逻辑，Swift 文件是如何创立，什么时候新建一个比较好，以及 Cocoa 框架的运用~这部分对于第 9 章中开始用开发 iOS 的软件有非常好的上手作用！ 第 8 章 省略！ 也就是增强了一下这个 silly 的计算机可以算复利，啥，你不懂啥叫复利？ - 0 0 第 9 章 开发 iOS 程序因为触屏，自然变成了 Cocoa Touch 框架，而其他的逻辑都和 Mac 无差这章中，在建立完四个颜色方块之后，就是一堆的代码，如果你看的是 1st 版本，估计会有不少问题，不过不要在意。先将那一堆你也许很多都看不懂的 code 全部一股脑放进去，在码的期间，也尝试用之前学到的看看能识别出来几个，哪里用到了扩展？闭包呢？这个 method 的逻辑是什么？能做到什么？为什么能做到？在每个 method 时问自己这些问题十分有帮助！虽然很多的细节我都看不懂，可是我能吃透整个 method 达到什么效果，为什么要写这个 method，写完这几个后还差什么功能需要实现。 写完这些后，就到了纠错时间。善用 StackOverflow，里面的问题十分有帮助，必要的可以收藏一下。这里对英文要求挺大~因为 一定不会有一模一样 code 的问题，但是肯定会有一样的 error，而这些 error 都附带着提问者的 code，好了，学习时间到了！遇到了压根看不懂的，跳过咯，先找那些你一眼就看到比较熟悉的，然后分析他的 code 逻辑是什么，想达到什么效果，再结合下面回答者给的如何修复 code 的问题，去理解这个 error 的问题是什么，然后举一反三啦啦啦！ 不要气馁。由于第一版，由于 StackOverflow 中有十分多的 code 情况都很不一样并且不是那么容易搞定，也许你看了好几个也解决不了，没关系，不要气馁，要知道没有解决不了的 error，只有不耐心的 programmer。 通过尝试各种方式的改变，最终你一定能成功。 推荐一个在找问题中，遇到的一个 Youtube 小孩录得视频，各种 error 的解决方法，着实涨了很多见识，真是年少有为！地址：Jeferry App 第 9 章 成果图 着实很丑- -其实就是四个灯，你跟随者点，25轮后你就胜利了，点错了会提示你点错了，然后你再尝试就好了- -简直愚蠢的不行，你写完后玩的时候就知道有多愚蠢了- - 改进基于我遇到的那些 silly 问题，我进行了改进这个愚蠢的游戏。 主界面增加了文字说明 增加了开始按钮（本来打开就会开始，你都看不到第一个亮的是啥） 将初始难度降到最低，1轮就胜利（有按钮可以增加难度，并且会问你选择增加，还是不增加） 胜利后开启新的游戏 失败后可选择从重新开始，开始继续尝试（原本只能重新尝试）改进后效果如图： 也许你会觉得感觉这些增加的功能好好好好好简单啊！对，就是很简单。但是- -你写了就知道啦！通过自己的想要达到的想法，去增加新功能，可以很有效的熟悉整个代码以及各种前面提到的难点。 最后至此，我已经完成了一个 Silly 但还不至于是愚蠢的 iOS APP未来，我会将更多学到和练习到的新功能增加到这个被我称为「FollowLight」的小游戏里当然，仅当这些功能可以加入，并且适合加入！ 还有个第 10 章我们下回再谈咯！]]></content>
      <categories>
        <category>Swift Learning（Swift 语言学习）</category>
      </categories>
      <tags>
        <tag>language</tag>
        <tag>learning</tag>
        <tag>swift3.0</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift 学习日记 - 目录/相关资料]]></title>
    <url>%2F2016%2F05%2F21%2Fswift-learning%2Fswift-learning-outline-source%2F</url>
    <content type="text"><![CDATA[欢迎来到 o1xhack (Yuxiao) 的 Swift 学习日志。更多请看最后。 目录 Swift 学习日记 - 1（2016.05.25） Swift 学习日记 - 2（UIAlertController）（2016.07.21） Swift 学习日记 - 3（复习与程序相关）（2016.07.26） 相关资料#1 代表为 学习日记 1 中所提到 xCode Error 解决方法视频：Jeferry App（#1） iOS-个人整理16 - 警示框–UIAlertController（#2） Using Swift with Cocoa and Objective-C（#3）]]></content>
      <categories>
        <category>Swift Learning（Swift 语言学习）</category>
      </categories>
      <tags>
        <tag>language</tag>
        <tag>learning</tag>
        <tag>swift3.0</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Drafts：这个号称最快记录的软件，究竟值不值得你去买？关于记事。]]></title>
    <url>%2F2016%2F04%2F21%2Fios%2Fdrafts%2F</url>
    <content type="text"><![CDATA[本文写给 差钱的你~不差钱的请直接买~买了觉得不好也请不要黑~ 尝新者：尝试一切新鲜的事物 荐当你还在纠结于苹果自带的备忘录不够用，印象笔记的服务太臃肿，简单的第三方软件似乎不够用也不够快是，一定听闻了许多关于 Drafts 的传说，最快，最便捷，超高级的可扩展项 …所以究竟价格 68 元号称最快抓取记录的 Drafts 软件是否值得呢？ 本文附有态度，持 值得 态度，文风不保证科学般的严谨。 似乎这个类型的文章已经快变成了我的一个文章系列了~ 也正如我的简介所说的，我的评测偏向于收费软件，我不能保证绝对的客观独立，但我会尽可能的收集不同资料，这类型的文章主要是为了让你认识到，很多软件不是你花钱买了就是适合你的，也许你被复杂的使用和臃肿的功能所拖累，也许你的生活习惯和效率使用更加适合其他的软件，为了更深层次的认识到这种高价格的软件是否值得，未来也会写更多的这类文章（原谅我的使用也不是全面的，也是基于我自己的使用和他人的分享所总结的，也许不能面面俱到，不过一定会为你的抉择提供一些参考，让整个文章的内容更加丰富和客观也是我所期望达到的效果。） 首先主观的说明一下，如果你是寻求一款纯粹的 Markdown 写作的 iOS 软件，我是不建议 Drafts 的，Drafts 的定位更偏向于记事本，最新的第四版也是添加了文字工具的标签，总的而言，Drafts 是一款提供文字工具类强力编辑能力的记事本。 介绍 如整个 Drafts 的图标所表明的，左边是快速的记录保存，右边是强大的抓取与分享工具。 「Quick Capture &amp; Simple Powerful Actions」 官网的简介正是如此的贴切，比我自己费尽脑汁所想到的介绍要好的多。 Drafts 一切都是建立在两个分项上： Quick Capture：快快快！这是整个软件的宗旨，我们不要你复杂的分类记事文本，不要你复杂的选择主题与标签，烦请打开直接记，忘记臃肿的印象笔记和其他软件，记就行，写就行！ Simple Powerful Actions：你想保存到哪里都可以，拥有这强大的动作选项，拥有许多的出口。 所以整个 Drafts 的意义就是，在记录文字时，除去一切的烦恼和繁琐的应该考虑的事情，都放到最后来处理，就像一个草稿箱，在记录时不要考虑那么多，只管记录，在后期你想怎么办都可以。 所以，说了这么多，你究竟应不应该花 68 元买呢？ 功能先来透视以下 Drafts 比其他软件强大的地方： 快速的编写：无需任何其他操作，可以设置每次打开都是新的文本来编写。不需要被各种标签主题所局限。 强大的管理：后期可以对文本添加 旗标 或者 归档，短期记录用来看的可以直接归档，免去被骚扰影响，旗标有专门的分类可以查看，达到了邮件 Pin 的效果。 社交浏览模式：记录的网址，电话等社交信息链接信息，都可以在社交浏览模式下快速点击直达，省去复制黏贴，真正达到一键直达。 字体和主题的多样性：将近快百种字体可以选择，三种主题选择，支持 Social，Markdown，Plain Text 的显示。 分段式浏览：可以根据空行段落以及空格，智能化的分段浏览，款速查看每一跳，快速删除，达到最直观的效果（对于多段文本以及多行非常实用！） 输入界面快捷键：支持自定义输入界面快捷键，可以快速的加符号，移动光标等（可以自定义每一个，自然也可以完全删光）。让文字输出上升一个等级。并且支持 Javascript 脚本代码，他的可玩性非常高，当然如果你并不会用也可以忽略。 TextExpander：对于第三方 TextExpender 的支持，此项功能属于纯扩展，关于此功能文章可进入 sspai 搜索 字数统计：输入界面右上角直接显示出字数统计。 排序：支持根据打开时间，创建时间，修改时间或者文本进行排序，方便查找。 搜索：强力的搜索，可以在 Inbox，Archive，Flagged 不同的三个地方搜索所有的文本内容。 强大的文本信息记录：可以看到文本创建的地点，修改的地点，每一次修改的存档，快速恢复以前的修改，包括此文本是否有激活过任何动作，你能想到的信息，一切都在。 强大的动作支持：作为一款记事本来讲，这些动作的支持已经远超想象，你可以分享近乎任何的网盘以及软件，Day One，印象笔记，Calendars 5，Omnifocus，Interact，Spark，Clear，Workflow，Due，多的数都数不过来，并且可以自己创建支持 url 的动作，官网拥有自己的 Action Directory，可以发掘许多意想不到的动作，并且在动作的页面有关于这个软件的商店介绍，让你一步了解自己的需求！超出你想象的简洁动作，自然也有复杂的群组动作，可以将多个动作串联起来达到 Workflow 的效果。新版本几乎所有的动作都可以进行你个人喜好的自定义，真正意义上达到分享无国界，动作无限制！ 介绍完这些强大的功能，你应该对于你所需求的有了一定了解，应该有百分之五十的人已经基本抉择好是否需要，接下来请看我关于不同人需求分类的划分来更进一步确认 正如官网所说的：这是一个 different kind of note taking app（与众不同的笔记记录应用。） 分析对 Drafts 的使用需求是否值得买呢。 第一种： 不怎么使用笔记本的人，想要开始使用笔记本。 如果你是这类人，首先建议你不要购买，除非你已然了解了 Action 方面的强大（已经使用过 Workflow 类软件）并且确定自己对于笔记的需求一定需要强大动作的支持，可以直接使用，其他人建议将苹果自带的备忘录放到首屏，强行使用一个月，要知道 “实践是所有一切的真理”，在使用备忘录期间，注意自己是否经常找不到笔记，是否对于字数敏感，是否对于自定义敏感，按照我上面分析的 Drafts 的特点一一注意是否没有了这些会觉得使用麻烦不顺畅， 最关键的：是否因为繁琐的新建笔记而忘记输入内容，是否因为麻烦的划分分类而揪心。 第二种： 已经使用过其他笔记本，觉得还可以用或者觉得完全不能用。 使用过笔记本的人不外乎两种，简单简洁的类似于自带备忘录的（当然有更多第三方好看的更强大一点的，不过皆归为一类），复杂臃肿的类似于印象笔记的。 使用简单笔记的 像上面一种人一样，强行在一段时间内高度使用备忘录，并且对照我所罗列的特点一一查看是否有需求，在使用完后想必你已然有了答案，再结合我给的扩展功能，更高阶 Drafts 使用的说明，来确定是否有需求。使用印象笔记一类的首先需要确定自己需不需要一个轻度笔记应用，在我看来，很多人对印象笔记的使用熟练度已经完全克服了他的困难程度。 关键点是：你是否需要一款特别快输入的软件。很多的笔记记录就是需要快，尤其是很多 idea，一闪即逝，在臃肿的印象笔记中等待打开并且输入已经会消磨部分的想法，这时候你就需要一款类似于 Drafts 的快速记录软件。 关键点二：你是否需要超出与印象笔记分享的动作。这一点其实是很难确定的，因为 Drafts 的定制化非常的可扩展，可以有太多不同的选择定制，也许你看到的列子都是你觉得不需要的，而实际上是有你需要的，所以我的建议是，英文好的多浏览 Action Directory，查看你已用的软件来发掘自己的需求，另外就是你是否想搞，凡是定制的东西都是需要一定的学习，如果你在 workflow 类似软件中已经发掘自己不喜欢深研究，我是觉得你基本在 Drafts 中也不会很研究的（当然你非说你会我也没办法0 0），这需要一定的学习和应用，这种定制化的强大不是说一分钟就可以发掘，如果你不想发掘，自然就不需要了。 最后依旧是那句老话：一切能够使你效率真正提升起来的消费都是值得的。 finally，我不为任何看了文章买了 Drafts 觉得不好用的人 负责哟~]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>ios</tag>
        <tag>app</tag>
        <tag>review</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「iOS」Television Time - 追剧领域快准狠原则]]></title>
    <url>%2F2016%2F04%2F20%2Fios%2Ftelevision-time%2F</url>
    <content type="text"><![CDATA[荐快，准，狠。这个应用做到了追剧应用垂直领域中的精品！ 尝新者：尝试一切新鲜的事物 你可别问我有没有这个垂直领域，反正我是觉得有 🌚今日推荐的追美剧应用名叫 Television Time，价格18大洋~在追剧应用这个垂直领域中，还是有数不清的被推荐的应用哒！每个人风格不同，喜好不同，鉴赏不同，自然会喜欢不同的应用。但要说到到哪儿都实用的三大定理，“快，准，狠”，不得不推荐一下 Television Time 了！ 说说 快准狠快准狠是我在用了越来越多应用后，用来筛选和留下应用的第一准则。如果一款应用无法做到 快速的运营、迭代、更新，无法做到 准确的定位这个垂直领域所需要的点，无法做到 狠狠戳痛用户大部分痛点，那么我认为他是不值得保留的。（虽然我应用上4xx了，但是我依旧是这么筛选留在前两页的应用，因为使用习惯，一年仅用几次的我也想保留，不喜欢突然想却要重新下载的感觉~）以上领域对于追剧这类辅助应用尤其有效，微信啊QQ啊，啥的，忍忍也是可以的hh 快与准 快：仅仅需要 1 秒钟便可以启动 Television Time，图片加载无需等待（头一次需要加载时间，新加美剧也需要加载时间，不要清理缓存即可），更新及时，虽然不像 instagram 啥的 “每周更新”（笑了），但是新的功能加入也是毫不手软（Spotlight搜索等） 准：追剧需要什么？对我来讲，我需要下一集播放时间，还有多少集没有观看就已经足矣，甚至连介绍都不需要，为什么呢？我不相信一部好的连续剧，一个简单的介绍可以涵盖，所以还是体验为主。 准：为什么要在强调一遍？对于这种辅助类应用，没有新剧我完全不需要打开，看完新剧很需要打开标记一下，想知道没看过什么可以立马速度的知道的应用，反而是功能越少越好。要知道，一切辅助应用都是为了节约你的时间，为你营造更多其他的时间而存在的，如果一款追剧应用打开速度向所谓 “微博” 那样的 “快”，那么他准备好棺材吧0 0 狠与痛点 狠：狠和准时结合的，越是单纯目的的软件，其实越好，之前用过不少软件，拥有花哨的功能，主题等等，但是当尝试过一款简约至上的追剧应用后，才算明白了什么叫做狠！套用乔帮主的一句话 “人们根本不知道自己想要什么，我们给他们看了他们才知道想要什么。” 一个产品做减法是很难得，然而我觉得追剧类应用就应该简单为上，作为一款辅助应用，那么多的功能，反而是累赘。 狠，戳痛点：在我用 Television Time 之前从没想过一个简单的统计功能竟然让我这么着魔！我现在打开 Television Time 后必看统计！看看自己浪费了多少时间在这上面，然后就好好学习！嘿嘿！ 狠，同步：Trakt 在国内不行大家都是知道的，虽然 iCloud 也时不时有问题，但好歹可以用的，iCloud 同步可以保证你换手机不会忘记看到哪一集，认真说，的确是痛点。 为什么不说具体功能：因为，追剧应用的基础功能他都有！除非你对某一软件的独有功能非常着魔，否则我一定会建议你考虑一下这款软件哟~ 总结以上分析，均基于本人使用习惯及使用场景。 “一切能够让你使用变得简单的效率应用才是最适合你的” 是本人秉承的购买应用的原则之一~]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>ios</tag>
        <tag>app</tag>
        <tag>recommend</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「iOS」即刻 - 这才是新闻推送该有的样子]]></title>
    <url>%2F2016%2F03%2F17%2Fios%2Fjike%2F</url>
    <content type="text"><![CDATA[即刻 用精准的主题，充实你的每一天。 “你需要的不是一群新闻应用。” 尝新者：尝试一切新鲜的事物 简介即刻这款软件已经不算一个新软件了，但是他的新颖和特性算是史无前例。（至少在中文资讯这方面）市面上有无数多的新闻软件，听播客是听到播主吐槽了很多。 “很多软件已经偏向，而不是新闻，总是用噱头和无趣的事情打扰我们的消息。” 当你还在 xx新闻中翻箱倒柜的想查看你想看到的咨询时，谷歌入华消息有了吗？周星驰又要拍新电影了嘛？新闻软件无法及时的提供你想看到的主题，它们越发的复杂，越发的难弄，越发的无法找到真正的消息。即刻出现了。 功能：订阅细致的主题，虽然不能涵盖每一个方面，不过即刻正在努力，将主题们发展壮大，你不需要安装一个个软件而只需要其中百分之10到20的内容，耗费几倍的时间去找寻，通过一个个定制化的主题，你可以不管不顾，直到他给你提醒。 主题好在哪里？你不需要刷 Product Hunt 就能获得优秀的产品，不用刷 Medium 就能获得好的英文文章，有 90％ 烂番茄的电影你就会知道，少数派一周的点评不用你操心查看，谷歌入华怎么样了？等等 定制：可以定制你想要收到推送的频道，我是全部开启，如果你只想自己最感兴趣的推送，其他的进入软件中慢慢看也不是不可以～ 缺点：并不能保证一切有关的都可以推送（iOS 软件限免，并没有我知道的那么多），推送的并不是最快的（有些我获取的比他获取的还快）。 总结这是一款绝对值得拥有的消息应用，如果未来依旧风顺，它将越来越好，至少，它不会让你将时间浪费在一群无用的信息中。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>ios</tag>
        <tag>app</tag>
        <tag>recommend</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Tech」译文：谷歌发布一款可以无需掏出手机便支付的 APP]]></title>
    <url>%2F2016%2F03%2F10%2Ftech%2Fgoogle-hand-free-pay-mobile-payments-trans%2F</url>
    <content type="text"><![CDATA[翻译者@o1xhack（无偿翻译，如果侵权请告知，转载请注明来源和翻译者！） 尝新者：尝试一切新鲜的事物 谷歌这个黑科技满满的公司，又发布了一款实验性的软件！不用掏出手机，直接完成支付，看完视频，真实满满的 “这个逼我给1000分”。 原文： The Verge 官方宣传视频：点击观看（优酷）CNET 实际体验视频：点击观看（优酷） 本文是我第一次尝试翻译，生硬请谅解，能懂我就满意了！未来会将这种看到的新科技，尽可能的翻译过来，让大家能够了解更多！ 文章及翻译： Google today released an experimental payments app called Hands Free, a service that lets you pay for items in stores without taking your phone out. 谷歌今日发布了一款实验性的支付 APP，叫做 Hands Free，一项能够让你在商店中无需掏出手机便可以支付的服务。 The iOS and Android app relies on Wi-Fi, Bluetooth, and location services to determine when you’re nearby a participating retailer or restaurant. iOS 以及 安卓 的 APP 都是依靠 WIFI，蓝牙以及定位服务来确定你是否在参与体验的店铺附近。 When you get to the cashier, all you have to say is, “I’ll pay with Google,” and the clerk can confirm your identity with a photo on their end to complete the transaction. 当你到达收银台后，你仅仅需要说，“我要用 Google 支付”，这时收银员会进行支付确认并在最后确定你的相片是否相符，然后变支付成功了 The service is only available in the southern end of the San Francisco Bay Area right now, and participating stores include McDonald’s, Papa John’s, and a handful of local retailers Google doesn’t list by name. 这项服务目前仅在 San Francisco Bay Area 的西部进行实验，参与的商铺仅有 麦当劳 和 棒约翰，以及没有在 Google 官方给出的列表中的一家当地手工店铺。 Hands Free, which was first announced last May during Google’s I/O developer conference, is designed to be a companion to Android Pay, the separate Google-owned payments service. Hands Free，首次在五月份的 Google’s I/O 开发者大会上被提及，初衷是作为谷歌拥有的支付服务安卓支付的同伴。 Android Pay now has around 9 million registered members, but the company “wanted to explore what the future of mobile payments could look like,” writes Pali Bhat, a senior director on the Hands Free project. 安卓支付现在有 900 万用户注册，但是公司 “希望扩展未来移动支付可能达到的样子”，Hands Free 项目的高级总监 Pali Bhat 写到。 “GOOGLE IS EXPLORING AN IN-STORE CAMERA FOR CONFIRMING YOUR IDENTITY” “谷歌现在正在开发一个商店内摄像头来确认支付者的身份” Cashiers have to identify you by checking your initials and the photo you submit to Hands Free. But Google says it’s working on implementing an in-store camera system that would automatically confirm your identify by taking a picture and cross-checking it with your Hands Free profile. “All images captured by the Hands Free camera are deleted immediately,” Bhat writes. 收银员需要通过你提供给 Hands Free 的姓氏和照片来确认你的身份。但是 Google 说通过建立一个商店内的摄像系统，可以将实时拍摄的图片与你上传的图片进行交叉对比来验证。“所有被 Hands Free 摄像头拍到的图片都是立即删除的，”Bhat 写到 Eerie photo recognition systems aside, the idea of paying with just your face is not a new one. Both PayPal and Square have tried similar initiatives in the past and both have failed to take off, mostly due to a limited number of participating merchants and the sheer enormity of trying to replace credit cards and cash. 将可怕的照片识别系统放到一边，通过识别你的面部来支付已经不是新花样了。PayPal 与 Square 都曾经尝试过相似的动作，两者都失败了，主要原因是因为参与的商家非常有限以及大规模的想要取缔信用卡和现金。 Android Pay, which lets you put your phone next to a NFC terminal to pay, is the most mainstream of Google’s payment options out there as it doesn’t require anything beyond upgrading existing card swiping tech. So it’s unclear how far Hands Free can spread, even if it does remove the phone entirely from the equation. 安卓支付，让你可以将手机靠近支持 NFC 的终端去支付，是谷歌支付目前的主流，因为他不需要升级现有的刷卡技术。所以现在 Hands Free 能走多远我们并不知道，哪怕他并没有将手机这个支付中的必需品完全的剔除。 官方网站]]></content>
      <categories>
        <category>Tech 科技</category>
      </categories>
      <tags>
        <tag>tech</tag>
        <tag>mobie payments</tag>
        <tag>译文计划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「iOS」Followers+ - Instagram 网红离你不远啦]]></title>
    <url>%2F2016%2F03%2F09%2Fios%2Ffollowers%2F</url>
    <content type="text"><![CDATA[Followers+ Surge 让整个 VPN 界都跨出了一步，未来必定会有更多类似 Surge 的软件出现，当翻墙已经不再是一件难事，不如来看看这款 Instagram 的工具吧。 “它很丑，一堆内购，可我依然在用它。” 尝新者：尝试一切新鲜的事物 荐它有两个版本，一个是收费的 Pro 版，我已经忘记 Pro 是多了什么了，先下载免费的用吧，可以就不用买了。 “如果你很想当网红，可以考虑买了内购。” 可我一直在用它，从下载开始，因为我用 Ins，也有点强迫症。 最基本的功能，也是最需要的，谁关注了你，谁取关了你。 数据，有许多不同的数据分析，包括总的赞的数量，平均的赞等等。 高级一点的功能，哪些人关注你你却没关注，哪些人你关注却没关注你 内购：删除了什么评论，谁屏蔽了你，赞你最多的，关注你最多的，tw 和 fb 透视，就像一个全面的 instagram 分析工具（内购并不是单一，每个都有不同内购） 我为什么用？（大概我有强迫症）被认识的人取关我会很不开心！而且会觉得，被取关了很怪异，我关注了他，他却取关了我，这算什么玩意儿！ （大概我有网红梦）我关注了你，你却没有回关我，不开心！当然是指朋友或认识的人。 由于 instagram 的限制，你只能自己慢慢的刷列表看哪些人关注了你，你也没办法看到谁取关了你。如果你对于哪些人关注和取关比较在意，不如来试试这款软件。 最后它更新很及时，连 Apple Watch 都已经支持，它没有一堆新的功能，但可以保持新特性的支持，纵观国内的很多 App，呵呵大~]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>ios</tag>
        <tag>app</tag>
        <tag>recommend</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「iOS」Publish / Later - 设定你的 Instagram 发送时间]]></title>
    <url>%2F2016%2F03%2F08%2Fios%2Fpublish-later%2F</url>
    <content type="text"><![CDATA[定时发送 InstagramPublish - On Twitter &amp; Instagram(推荐) Later - Plan and Schedule Posts for Instagram 尝新者：尝试一切新鲜的事物 两款设定时间发送 ins 的软件都无法实现自动化发送 只能够通过提醒来进入APP并跳转发送 UI界面：Publish 完胜 设定时间：Publich 可以自动根据 ins 设定最佳时间 比较容易获得赞的时间~ 账户：Publish 在选择照片后可以选择多个账户 而 Latergramme 只能账户切换后再添加]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>ios</tag>
        <tag>app</tag>
        <tag>recommend</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「iOS」Castro - 不如听播客]]></title>
    <url>%2F2016%2F03%2F08%2Fios%2Fcastro%2F</url>
    <content type="text"><![CDATA[听Castro 播客 一个小但拥有灵魂的聚合 当你还在没事听听音乐 听听休闲电台的时候 不如抽空将下载的播客听一听？ 尝新者：尝试一切新鲜的事物 荐老实说，苹果自带的播客挺好用的 ，功能也基本能满足，作为一个果粉，我既然觉得够了，为什么还要推荐另一个呢？如果你和我一样，更中意一个美美的播客，Castro 是一个不二的选择。IT 公论也是推荐了这一款软件来作为播客客户端，当然我是在这之前就用了🙊 美，细腻，简约，是不是乍一看没有那么的美？相信我，随着不断地打开，你会爱上它那独特简约又不失优雅的美。 真正的实用：不多一毫的设置项，却又涵盖了绝大多数人的需求（你有独特的需求的话我不能保证）播放的选项，下载的方式，缓存的管理。就连是否跳转 Safari 都有设置，如果你厌烦不停地跳转，不如来试试 Castro。 完美的手势：主界面的 “节目” 列表下，从左向右滑动选择删除或者下载，从右向左滑动标记为已观看。（缓存机制其实是不需要自己手动删除的，除非你强迫症看完一定要删0 0） 总结：我不能保证这是一款能满足你所有特殊需求的博客，但我可以保证这是一款你用久了会爱上的博客，没有繁杂的功能，抛弃无聊的选项，秉承美而简的界面，播客，不正是需要这样么？ 更新：2017.02.25：Castro 之前更新了新版本，而在那儿之前我已经切换成了 Pocket Casts，等以后有空写写咯~]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>ios</tag>
        <tag>app</tag>
        <tag>recommend</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「iOS」Blogo - 博客？]]></title>
    <url>%2F2016%2F03%2F08%2Fios%2Fblogo%2F</url>
    <content type="text"><![CDATA[期待？期待的 Blog 软件 Blogo 之前招收了 TF 用户 “如果你不用博客，也很就不用考虑这个APP” 尝新者：尝试一切新鲜的事物 UI界面：说不上平庸，却也没有很强的亮点 支持：仅支持三个博客源，其中Worldpress 在中国属于瘫痪 专门注册了一个 Blogo 的使用体验并没有比原生客户端好在哪里 首先 理念：Blogo 是想到达随时随地记录 想发便发的地步 然而通过 Drafts 完全可以达到 Action 的衔接一点不差 Drafts 的体验也是异常的优秀 点击：Drafts 文章Drafts 文章]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>ios</tag>
        <tag>app</tag>
        <tag>recommend</tag>
      </tags>
  </entry>
</search>
