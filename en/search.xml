<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Shortcuts (since iOS12)]]></title>
    <url>%2Fen%2F2018%2F07%2F20%2Fshortcuts%2F</url>
    <content type="text"><![CDATA[Total 1 shortcutsEdited 1, Created 0 Shortcuts ‰∏≠ÊñáÁâàÊú¨ How to get the shortcuts in this articleOn this page, please open in Safari on your iPhone, and having Shortcuts installed. Then click the ‚¨áÔ∏è icon on this page to download. You will see image under and click ‚ÄòOpen in ‚ÄúShortcuts‚Äù‚Äò, it will go to Shortcuts APP and ask your import QA. DarkSky Weather CheckedThis is the one edited from MacStories Club, it have previous steps to do the API stuff and etc. I won‚Äôt provide that since it‚Äôs not a free club. (If Federico share for free, I will update too.) This one only added the ‚ÄòRun Shortcuts‚Äô action so you can get the real location each time. (You definitely will need the original Get Coord shortcuts by MacStories Club.) The import QA will ask which shortcuts to run, so choose the one you got from Federico. ‚¨áÔ∏è DarkSkyCheckEdited Any question please directly comment this article, I will receive notification!]]></content>
  </entry>
  <entry>
    <title><![CDATA[üìå Top Articles, Series Articles üìå]]></title>
    <url>%2Fen%2F2017%2F10%2F01%2Ftop%2F</url>
    <content type="text"><![CDATA[iOS App I developed~ Coffee It üî• Info It 2.0, Chinese Tech Add SafariViewController as childViewController with SnapKit]]></content>
  </entry>
  <entry>
    <title><![CDATA[GitHub - Awesome iPad]]></title>
    <url>%2Fen%2F2017%2F06%2F30%2Fios%2Fawsome-ipad%2F</url>
    <content type="text"><![CDATA[Awesome iPadMore at GitHubBased on AwesomeHave ‰∏≠ÊñáÁâàÊú¨Also in English VersionWith mit licen‚â•‚â•ce Here is a place for collection of Awesome iPad APPs! This is launched at This Blog and for further contribution, copied to GitHub. Feel free to Star and Fork. Leave any suggestions and comment. Also need contributors! Base on awesome format. About means this APP support Apple Pencil. Content Photo Edit Note Taking Photo EditNote TakingNotability:]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>ios</tag>
        <tag>app</tag>
        <tag>github</tag>
        <tag>ipad</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS APPÔºöCoffee It - Track Caffeine in Simplest Way]]></title>
    <url>%2Fen%2F2017%2F03%2F20%2Fcoffeeit%2F</url>
    <content type="text"><![CDATA[IntroCoffee It is an iOS APP that builds for those who drink Coffee a lot. There are a group of people who want to log all Caffeine they drink each time. And from all iOS APPs, most Caffeine Tracker APP are abandoned in a few time, without further bug fixes and improvement, the APP is difficult to use. The rest are expensive, and less functional. This is why I develop Coffee It. Please download Coffee It - Track Caffeine in Simplest Way and give a try! For me, it only takes a seconds to log the coffee before I throw the empty cup, so if you feel it‚Äôs not that good to use, give me feedback and I will try my best. Using telegram to give me feedback: @o1xhack As a student with spare time for these APPs: Leave a 5-star if you like it or want support me! AboutI‚Äôm a student in Computer Science, and I learn Swift and iOS Development myself. This APP may not fulfill every coffee lover‚Äôs requirement, but I will keep developing it with any feedback! I cannot assure I can do every function since I still need time for my University Study, but with my spare time, I will do my best in improving it. As you can see, I‚Äôm consistently making Coffee It faster and easy to using, for me, it only takes a seconds to log the coffee before I throw the empty cup, so if you feel it‚Äôs not that good to use, give me feedback and I will try my best. Features I put all my time on my developing process (beside student works) that I don‚Äôt have time to write a whole article for features, here are the summary. I sincerely appreciate you give me any advice or leave a 5-star with comment! Complete DataBuild-in caffeine data will fulfill most normal situation. Fulfill most normal routine log. FavoriteFavorite what you like and add in seconds Quick, Fast like flashThe only thing you need to care is to choose the type of coffee. In Favorite List, single click to confirm add without more steps. Set History as default view, and click any history to add that data, quick like Flash! CustomizeMake your list and store specific type. Customize your life and your mood! (: ConvenientOpen it, Log it, and View it. Minority Function: Set Badge to number ‚Äú1‚Äù, and put inside a folder, 3D Touch folder to quick open Coffee It, and log coffe! Daily Total and LimitationView all your history! (integrated with Health) See your daily total intake and percentage of the daily limitation‚Äã(300mg) FutureI have ideas about history analysis, data analysis, and I will try my best to develop it, but I cannot promise to update every feedback in time, but I will do my best to keep Coffee It up-to-dates. I‚Äôm using it too! Upvoted on ProductHunt Please give the app an upvoted if you can! Update TimelineYear 201710.9 App Store: 1.7.6TOP: Watch APP is in progress~ For all Soylent drinker, here we are! Cafe Coffiest Cafe Vanilla Cafe Chai Starbucks Coffee addÔºöIced Flat White Starbucks Beverage addÔºöCool Lime Starbucks Refreshers 9.28 App Store: 1.6.13Coffee It already supports iOS11, if any problem, contact me please.Also In-App Rate system added! Please give a 5-star! Since the latest Apple Watch got a really fast speed to open 3rd APP, Coffee It will come up with a Watch APP, but won‚Äôt in few months. This semester cannot be more busier and I will try my best to maintain all LifeAnalysis Lab APPs. This is an update with plenty data update and detail changed. History View now shows the number of cups you take. (Some person may drink not exactly one cup) Starbucks now seperate into two new groups: Starbucks Coffee and Starbuck Drinks Just to let you know, there are still caffeine in lots of Drinks! Please check them and make your life better! New coffee data in Starbuck Drinks Strawberry Acai Refreshers Pink Drink Ombr√® Pink Drink Iced Black Tea (Lemonade) Iced Green Tea (Lemonade) Update coffee data in Starbucks Coffee Caff√® Latte Caff√® Mocha Caff√® Americano Nari√±o 70 Cold Brew I find out some coffee got different caffeine date with Iced compare to normal Hot one. Iced Coffee (Unsweetened) Iced Coffee (Sweetened) Iced Caff√® Latte Iced Caff√® Mocha Please notice when you drinking an Iced one, it‚Äôs normally got more in Venti type, also, you can submit a Request new Coffee types to help me add these data. Update Localization of Chinese UI Constraint change. 7.17 App Store: 1.6.6 Using Fabric to analysis now. No privacy problem! Won‚Äôt sell or give any data~ Just help me to learn how user using functions. Localization Chinese fix. Fix in Settings. No big update for this version. From data, Coffee It has extremely little users, if your friends love coffee, track stuff, welcome to recommend Coffee It! 6.23 App Stroe: 1.6.5 History View layout change! Easier to see the data~ New in-app notification UI Change in 4 other places, Please let me know if you have other advices Click to add at History View Add new list at Coffee View Feedback at Setting View New feature of the update version, this one it is! New launch screen! LifeAnalysis Lab is founded!(only me233) Send Feedback email from settings 6.12 App Store: 1.5.5‚Äî- Click in History to Add ‚Äî-Fast like Flash! Now you can click any single history in History view Then a confirm alert shows with details Click and, that‚Äôs it! ‚Äî- Set Default Open View ‚Äî-With the Click in History to Add functionIt‚Äôs better to let your choose the default open view History view or Coffee view ‚Äî- Localization ‚Äî-Since you all using En, I‚Äôm not introduced a lot.Just support most view/alert with Chinese ‚Äî- UI/UX ‚Äî- font unify UI unify (add to favorite change to Green) tab bar name change ‚Äî- Bug? ‚Äî- fix showing of History bottom view fix too many digit number(1.2222222%) in History Today view. some alert fix 5.29 App Store: 1.3.13‚Äî- Total Toady Caffeine ‚Äî- Now you can view total caffeine intake of today, the percentage of daily limitation(300mg) The percentage label will present RED if you get the limitation All data sync from HealthKit ‚Äî- Show Badge of 1 ‚Äî- Coffee It will ask for the request of notification, and then Coffee It will have the badge of ‚Äú1‚Äù for all time until you close this setting. After you open this, you can put Coffee It inside a folder, and 3D Touch the folder to quick open Coffee It with one step. ‚Äî- Localization ‚Äî- Now History daily goal view supports Chinese. Go to APP Settings and open „ÄåÊú¨Âú∞Âåñ‰∏≠Êñá„Äç 4.17 App StoreÔºö1.3.3 Delete in History view New Setting UI New Setting: Confirm Add Alert in Favorite View Auto layout fixes URL Scheme basic support Bug fixes 4.5 App StoreÔºö1.2.2 Favorite function! Coffee Data support Chinese language Add more coffee types Bug fixes 3.30 App StoreÔºö1.0.0 All basic adding, deleting, editing View controller and app info Health Data access and check Beginning 2017.03.16Coffee It first time update to iTunes Connect Caffeine Data Request If you have any Coffee Brand or types want to be added as Default. Fill the form. PolicyPrivacy Policy Caffeine Data Sources Policy]]></content>
      <categories>
        <category>iOS DevelopÔºàiOS ÂºÄÂèëÔºâ</category>
      </categories>
      <tags>
        <tag>swift</tag>
        <tag>iOSDev</tag>
        <tag>iOS APP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Coffee It - Privacy Policy / Caffeine Data Sources]]></title>
    <url>%2Fen%2F2017%2F03%2F18%2Fcoffeeit-policy%2F</url>
    <content type="text"><![CDATA[Coffee It - Track Caffeine in Simplest Way (Still Testing.) Privacy PolicyThis Privacy Policy relates to my use of any personally identifiable data (‚ÄùPersonal Data‚Äù) collected from you when using Coffee It. For now, I only read and write to APPLE Health APP through HealthKit, which is totally secure in transition. Coffee It now doesn‚Äôt have any server to collect or analysis these data. What Personal Data will I collect and using for?Coffee It is currently a track caffeine taken app, so I only ask for your permission of Caffeine write and read right directly from Health APP. By using APPLE‚Äôs HealthKit, all the data are secured and won‚Äôt affect your life. For now, I won‚Äôt do anything to your data including but not only analyzing, transfer to server ‚Ä¶ I only show your data in the app. Cookies:Same, Coffee It doesn‚Äôt need to be connect to internet so there are no cookies now. Data Using.I will only show your data if your want and always not to share anything data through anyway if you don‚Äôt want. EnforcementI regularly review my compliance with this Policy. Please feel free to direct any questions or concerns regarding this Policy or my treatment of Personal Data by contacting me through my website. Changes of Privacy PolicyCoffee It may change from time to time. As a result, at times it may be necessary for me to make changes to this Privacy Policy. Accordingly, I reserve the right to update or modify this Privacy Policy at any time and from time to time without prior notice. Please review this policy periodically, and especially before you provide any Personal Data. This Privacy Policy was last updated on the date indicated above. Your continued use of Coffee It after any changes or revisions to this Privacy Policy shall indicate your agreement with the terms of such revised Privacy Policy. ContactingIf you have any additional questions or concerns about this Policy or information practices, please feel free to contact me at any time at from my website or app. Caffeine Data Sourcesup-to-dated caffeine data sources list. Other than these sources, I also advice from Caffeine Informer, a website that have plenty data, to make sure my data was correct and enough. Capsule CoffeeNespresso Official website ps. The official doesn‚Äôt conclude every specific type, but give me the range of a big type, so I take the average from the range. Coca-Cola Official website Local market Dr Pepper 3rd party Official website Food RestaurantsMcDonald‚Äôs Official website Local restaurant Monster Official website Local market Pepsi Official website Local market Starbucks Official website iOS APP]]></content>
      <categories>
        <category>APP Policy</category>
      </categories>
      <tags>
        <tag>ios</tag>
        <tag>app</tag>
        <tag>policy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift 3 - Add SafariViewController as childViewController with SnapKit]]></title>
    <url>%2Fen%2F2017%2F03%2F10%2Fswift-learning%2Faddchildview-safari%2F</url>
    <content type="text"><![CDATA[IntroThis article is trying to add SafariViewController as childviewcontroller. I‚Äôm using SnapKit to auto layout everything and Swift 3 as the language. I also introduced some divide and multiply using of SnapKit that not describing much in official documents. Download final Project here. ‰∏≠ÊñáÁâàÊïôÁ®ãÔºöSwift 3 - Áî® SnapKit Ê∑ªÂä† SafariViewController ‰∏∫ childViewController Dev PersonÔºöDeveloper the World. SnapKitSnapKit is a DSL to make Auto Layout easy on both iOS and OS X. Why using?When I develop Info It, I encountered a problem that when I trying to add constraints at Xcode interface, the Xcode give me crash every time I using it. And after I installed SnapKit inside, I found it was something wrong with Xcode that I cannot find out why (searching Google, Stackoverflow, etc won‚Äôt give me any answer). After I installed SnapKit and using it, it solved my problem automatically and the elegant code of SnapKit makes constraints, auto layout beautiful and easy. InstallSnapKit Document Everyone can install it quickly using CocoaPods. This article will not describing details about install CocoaPods, I will directly install SnapKit, assuming you all installed CocoaPods. Create a new project with Swift language. Open Terminal while Xcode project still open(I using iTerm). Then ‚Äòcd‚Äô to your project address, and init the podfile &gt; pod init After this command, add this line inside your podfile, the place like I did in picture. pod &#39;SnapKit&#39;, &#39;~&gt; 3.0&#39; Then install pod using commend: &gt; pod install While install SnapKit, do not close the project! After install successfully like picture, close the project and open the .xcworkspace file SafariViewControllerI will using ‚Äúsvc‚Äù for convenient for SafariViewController. While you want using SafariViewController, you need to add SafariViewControllerDelegate after your class, and set two String we will using later as links: 12345class ViewController: UIViewController, SFSafariViewControllerDelegate &#123; // Insert two web link to test the child view let main: String = "http://o1xhack.com/2017/02/21/infoit/" let update: String = "http://o1xhack.com" Create a view and a button in the storyboard. (button using to test how to auto layout and also the change link of svc) And connect the view and button into the controller file. addChildViewControllerThen add the code inside viewDidLoad function about the auto layout and also childviewcontroller. 1234567891011121314151617override func viewDidLoad() &#123; super.viewDidLoad() showView.snp.makeConstraints&#123; (make) -&gt; Void in make.edges.equalTo(self.view).inset(UIEdgeInsetsMake(0,0,60,0)) &#125; let svc = SFSafariViewController(url: URL(string: main)!) svc.delegate = self self.addChildViewController(svc) self.showView.addSubview(svc.view) svc.didMove(toParentViewController: self) svc.view.snp.makeConstraints&#123; (make) -&gt; Void in make.edges.equalTo(self.showView) &#125;&#125; line 4-6:Make constraint of the showView(the view will be the parent of our svc), this code using SnapKit to make constraint of the showView compare to view, with bottom 60 to the view. Which will make an empty space of the bottom only. line 8-12:Line 8 set svc to a new SafariViewController with url of my previous settings. And line 9 set the svc delegate to self.Line 10 add the svc as childviewcontroller, and then we can using it add to showview‚Äôs subview in line 11.Line 12 tells the controller that the svc has moved to parentviewcontroller, which is the showView. line 14-16:This is basic the same as line 4-6, we set svc‚Äôs contraint just fit the showView, kind like set it to view(0,0,60,0), but since svc is the child view, we only need to set it‚Äôs constraint to it‚Äôs parent view. ResultAfter these codes, we run the project and will get this kind of simulation that the button was covered by the svc, which caused by we not setting any constraint with it. SnapKit againOnce for all, we know how to constraint a view with spacing 60 to the bottom, let‚Äôs do some work to set constraint of the button based on the showView and view. 1234change.snp.makeConstraints &#123; (make) -&gt; Void in make.centerX.equalTo(showView) make.top.equalTo(showView.snp.bottom).offset(20) &#125; Here for the code of change.snp.makeConstraints, we will need to add this part directly after the showView.snp.makeConstraints since we need to make constraint after and based on the showView. For line 2 we make the button center horizontally with showView, if you using Xcode interface to drag that before, it will be familiar to you.For line 3, we set the top of button has an offset distance of 20 to bottom of the viewShow. Since we make constraint that the viewShow will always be 60 to the bottom to the view, we can be sure the 20 distance will always working no matter the devices are. (Later, I will try to using another way of divide to set the layout, which is more elegant way.) Run project, and you will see the button is just under the svc and center exactly same with svc. Update SVCNow we need to write a new function to update the svc link once we click our button, and this is not quiet difficult, we just need to drag the button to our code and create an action. When we trying to add code in this function same as the one we add in viewDidLoad, and run the project, we will find that after we click the button, nothing happened! The code we add are right here: So why is this happen? (Remember you cannot just copy this code sicne the IBAction need you to connect yourself.) 12345678@IBAction func changeWebsite(_ sender: UIButton) &#123; let svc = SFSafariViewController(url: URL(string: update)!) svc.delegate = self self.addChildViewController(svc) self.showView.addSubview(svc.view) svc.didMove(toParentViewController: self)&#125; Well, that is because we don‚Äôt add any constraint to the svc we create in this function, so the system don‚Äôt know the layout the svc and where it should be. So we trying to add svc.snp.makeConstraints same as the one in viewDidLoad and the code become: 123456789101112@IBAction func changeWebsite(_ sender: UIButton) &#123; let svc = SFSafariViewController(url: URL(string: update)!) svc.delegate = self self.addChildViewController(svc) self.showView.addSubview(svc.view) svc.didMove(toParentViewController: self) svc.view.snp.makeConstraints&#123; (make) -&gt; Void in make.edges.equalTo(self.showView) &#125;&#125; Then we run the project and click the button, we will find the svc change the link and load a new website: (the first load is the article, and second is the main page.) SnapKit Divide / MultiplyThis project is basically done with all, now you know how to using SnapKit to auto layout then to make safari as an childview in anywhere. Well, but using precise number of offset is not very good. Why? Cause in the picture, you will find we don‚Äôt consider that height of the button and it has more white space from bottom of showView to top of button than bottom of button to bottom of view. So we will using a more auto way: Divide the total view height and using fraction to auto layout it. Now consider that we only need relatively little space for button and most of our view to svc, I will assume we divide the view into 10 parts, and the svc occupied 9 out of 10. So we are trying to divide the view into parts, but when in code we actually need to multiply the height with 0.9 because dividing height into 9/10 is not quick than multiply (Using your math skill to calculate). 123456showView.snp.makeConstraints&#123; (make) -&gt; Void in make.top.equalTo(self.view).offset(0) make.right.equalTo(self.view).offset(0) make.left.equalTo(self.view).offset(0) make.height.equalTo(self.view).multipliedBy(0.9) &#125; We change the make edge into details of top, right, left since we need a limit of height rather than based on edges. Line 2-4 makes the showView has no offset to the view of top, right and left. Line 5 set the height to be the 90% of the height of the view(superview). Run the project and you will find this really works: Then we will handle the button layout that also using multiply and divide way. To make the button fit equally with consideration of its height, we will divide the rest part of view(1-0.9=0.1) into 3 parts. Equally fraction of top white space, height and bottom white space. this means we multiply the height with 0.1*0.3=0.03 and same as the white space from bottom of showView and top of button. Let‚Äôs try it: 12345change.snp.makeConstraints &#123; (make) -&gt; Void in make.centerX.equalTo(showView) make.top.equalTo(showView.snp.bottom).multipliedBy(0.03) make.height.equalTo(self.view).multipliedBy(0.03)&#125; Woops! We got really wired one: Why is this happening?? That is because we are thinking a way that computer doesn‚Äôt understand! So actually we want the rest 10% of view divide into 3 parts, that is 0.1/3=0.0333‚Ä¶ which is infinite, so we just set the height to 0.034 of the height and the other two white space to 0.033. But what we need to do is tell the computer that it is 0.967(1-0.967) to the bottom compare to the view, not 0.03 compare to the showView. This is how multiply and divide works, we actually multiply the object‚Äôs height, not what we think that auto calculate the distance of white space, so changing the code into the following: 12345change.snp.makeConstraints &#123; (make) -&gt; Void in make.centerX.equalTo(showView) make.bottom.equalTo(self.view).multipliedBy(0.967) make.height.equalTo(self.view).multipliedBy(0.034)&#125; And it worked! Why using?You can see that multiply and divide can be quite confused especially you have two or more objects need to layout, but once for all, when you done the calculation, you will be good from that day to the day you need to add a new object! You will not need to consider different devices and the impact of using number as distanced to caused some button or label be covered by others.]]></content>
      <categories>
        <category>Swift LearningÔºàSwift ËØ≠Ë®ÄÂ≠¶‰π†Ôºâ</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>language</tag>
        <tag>learning</tag>
        <tag>swift3.0</tag>
        <tag>SafariViewController</tag>
        <tag>SnapKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ÂÖ≥‰∫é o1xhack.com ÁöÑ blog Êê≠Âª∫]]></title>
    <url>%2Fen%2F2017%2F02%2F19%2Fblog%2Fabout-blog%2F</url>
    <content type="text"><![CDATA[ÁÆÄ‰ªão1xhack.com ÂüüÂêçË¥≠‰π∞Ëá™ goDaddyÔºå‰ΩøÁî® dnspod ËøõË°åËß£ÊûêÔºåÂü∫‰∫é hexo Âíå github page Êê≠Âª∫ÁöÑÈùôÊÄÅÂçöÂÆ¢„ÄÇ hexo ‰∏ªÈ¢ò‰ΩøÁî®Â§ßÂêçÈºéÈºéÁöÑ next„ÄÇ ËèúÂçïÊ†èËØ¥ÊòéÂºÄÂèëËÄÖÔºö Êó¢ÁÑ∂‰Ωú‰∏∫‰∏Ä‰∏™ÂºÄÂèëËÄÖÔºåÊ≤°Êúâ‰∏Ä‰∏™ÂÉèÊ†∑ÁöÑÈ°µÈù¢ËØ¥ÊòéÂèØ‰∏çË°åÔºÅ iOS ÂºÄÂèëÁªèÂéÜÂèä Swift Â≠¶‰π†Áõ∏ÂÖ≥ Â≠¶Ê†°È°πÁõÆ‰ª•ÂèäÂ≠¶‰π†Áõ∏ÂÖ≥ÂàÜ‰∫´Ôºàstill struggleÔºÅÔºâ Â∞ùÊñ∞ËÄÖÔºö ‰ªéÊé•Ëß¶ cs ‰πãÂâçÂ∞±Â∑≤ÁªèÂ∞ùËØï‰∫Ü‰∏çÂ∞ë appÔºåiOS ‰∏∫‰∏ª‰Ωú‰∏∫‰∏Ä‰∏™ÂáÜÂ§á‰ªé‰∫ãÁßëÊäÄË°å‰∏öÁöÑÈ™öÂπ¥ÔºåÊÄé‰πàËÉΩÊ≤°ÊúâÂ∞ùÊñ∞ÁöÑÊÄÅÂ∫¶Âë¢Ôºü iOS APP Áõ∏ÂÖ≥ÂàÜ‰∫´ macOS ËΩØ‰ª∂Âèä‰ΩøÁî®ÂàÜ‰∫´ Kindle Á≠âÁîµÂ≠ê‰∫ßÂìÅÂàÜ‰∫´ Êô∫ËÉΩÂÆ∂Â±Ö„ÄÅÊô∫ËÉΩÁ°¨‰ª∂ÂàÜ‰∫´ ÁîüÊ¥ªËÄÖÔºö ÁîüÊ¥ªÁùÄÔºåÂ∞±ÊòØÂÖ®ÈÉ®„ÄÇ Êï∞ÊçÆÁîüÊ¥ªÔºåÈáèÂåñËá™Êàë ËØª‰π¶ÁúãÊä•Âê¨Êí≠ÂÆ¢ ÁîüÊ¥ªÂàÜ‰∫´ Áõ∏ÂÖ≥ Tips Êõ¥Êñ∞Êó∂Èó¥Á∫ø2017.2.24 Â¢ûÂä†‰∫Ü ÁîüÊ¥ªËÄÖ 2017.2.19 Â¢ûÂä†‰∫Ü ÂºÄÂèëËÄÖ„ÄÅÂ∞ùÊñ∞ËÄÖ ÂÆöÂà∂‰∏ªÈ¢ò 2017.2.18 blog Ê≠£Âºè‰∏äÁ∫ø Â¢ûÂä†‰∫Ü ÂàÜÁ±ª„ÄÅÊ†áÁ≠æ„ÄÅÂÖ≥‰∫éÊàë ÂÆöÂà∂‰∏ªÈ¢ò È¶ñÈ°µÊñáÁ´†Ê†áÈ¢ò„ÄÅÈòÖËØªÊõ¥Â§öÊòæÁ§∫Â±Ö‰∏≠]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
